<?xml version="1.0" encoding="UTF-8"?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your blog. -->
<!-- It contains information about your blog's posts, comments, and categories. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your blog. -->

<!-- To import this information into a WordPress blog follow these steps. -->
<!-- 1. Log in to that blog as an administrator. -->
<!-- 2. Go to Tools: Import in the blog's admin panels (or Manage: Import in older versions of WordPress). -->
<!-- 3. Choose "WordPress" from the list. -->
<!-- 4. Upload this file using the form provided on that page. -->
<!-- 5. You will first be asked to map the authors in this export file to users -->
<!--    on the blog.  For each author, you may choose to map to an -->
<!--    existing user on the blog or to create a new user -->
<!-- 6. WordPress will then import each of the posts, comments, and categories -->
<!--    contained in this file into your blog -->

<!-- generator="WordPress/3.0" created="2012-03-03 02:57"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.0/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.0/"
>

<channel>
	<title>一定要笑</title>
	<link>http://mgtuiw.blogcn.com</link>
	<description>Minix</description>
	<pubDate>Sat, 03 Mar 2012 02:10:17 +0000</pubDate>
	<generator>http://wordpress.org/?v=3.0</generator>
	<language>en</language>
	<wp:wxr_version>1.0</wp:wxr_version>
	<wp:base_site_url>http://mgtuiw.blogcn.com</wp:base_site_url>
	<wp:base_blog_url>http://mgtuiw.blogcn.com</wp:base_blog_url>
		<wp:category><wp:category_nicename>blog</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[blog]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>css</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[css]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>freebsd</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[FreeBSD]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>gentoo</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[gentoo]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>git</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[git]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>google</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[google]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>html</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[html]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>lighttpd</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[lighttpd]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>mac</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[mac]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>mysql-2</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Mysql]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>n900</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[N900]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>nginx</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[nginx]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>other</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[other]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>proftpd</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[proftpd]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>rails</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[rails]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>sed</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[sed]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>shell</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[shell]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>ssh</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[ssh]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>system</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[system]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>vim</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[vim]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>web</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[web]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>%e6%9c%aa%e5%88%86%e7%b1%bb</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[未分类]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>%e6%9d%83%e9%99%90</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[权限]]></wp:cat_name></wp:category>
				<wp:term><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug>header</wp:term_slug><wp:term_parent></wp:term_parent><wp:term_name><![CDATA[Header]]></wp:term_name></wp:term>
	
	<generator>http://wordpress.org/?v=3.0</generator>

		<item>
		<title>lighttpd2</title>
		<link>http://mgtuiw.blogcn.com/archives/51</link>
		<pubDate>Fri, 20 Aug 2010 09:58:48 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[lighttpd]]></category>

		<category domain="category" nicename="lighttpd"><![CDATA[lighttpd]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/7099195320107205584866</guid>
		<description></description>
		<content:encoded><![CDATA[今天来尝下新东西：lighttpd2.0 -- 是一个未开发完整的WEB服务器。

lighttpd2与1.xx首个不同的地方就是配置文件。两种完全不同的配置方式。lighttpd2的配置文件就像一个C语言程序：有函数，要调用已
在配置文件中已写的函数才可以远行。有特定的关键字(如一个压缩的函数，我使用了deflate开头并调用，这些会导致lighttpd启动不久后会自己
自kill.)它有特定的区域去干特定的事。有些配置信息像varnish(如req.host, req.localip等等).
还有一个有趣的地方就是使用到mod_status这个模块，它会打印出一个人性化的界面，而且您可以自己定义这个界面的,在2里面关于
mod_status的配置项只有一个，就不够1.xx丰富了，不知在接下来他们会不会增加一些配置项呢。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>51</wp:post_id>
		<wp:post_date>2010-08-20 17:58:48</wp:post_date>
		<wp:post_date_gmt>2010-08-20 09:58:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lighttpd2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324997988]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>eval</title>
		<link>http://mgtuiw.blogcn.com/archives/50</link>
		<pubDate>Sun, 22 Aug 2010 04:06:48 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[shell]]></category>

		<category domain="category" nicename="shell"><![CDATA[shell]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/7099195320107220648827</guid>
		<description></description>
		<content:encoded><![CDATA[今天看了rc.subr,发现shell的一个用法eval不是很懂,于是在网上查了下,发现一牛人的说法是:
<blockquote>
eval执行后面的字符串,这里实际上完成了两命令替换!</blockquote>
上面我理解的意思是:重复执行一行代码两次.

而我看到rc.subr里面的一段代码是

<code style="color: green;" mce_style="color: green;">eval _value=\$${1}</code>

会不会是以下的意思呢?
<blockquote> 例如${1}是name,那_value就储存$name的值.因为是eval,它执行了\$${1}.也就是先执行了${1}(例如是name),然后再执行\$name, 不过在eval看来,\$被再次执行时就变成了$,也就是变成了$name.</blockquote>
下面一个小脚本可以说明上面我的看法
<code style="color: green;" mce_style="color: green;">
#!/bin/sh

File="/etc/resolv.conf"

echo "File is \${File}"

eval echo "File is \${File}"

</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>50</wp:post_id>
		<wp:post_date>2010-08-22 12:06:48</wp:post_date>
		<wp:post_date_gmt>2010-08-22 04:06:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>eval</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324831275]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>varnish函数</title>
		<link>http://mgtuiw.blogcn.com/archives/49</link>
		<pubDate>Fri, 03 Sep 2010 10:02:32 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[system]]></category>

		<category domain="category" nicename="system"><![CDATA[system]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/7099195320108355451877</guid>
		<description></description>
		<content:encoded><![CDATA[<div>下面我是理解的8个函数的用法。varnish是通过这些函数来对数据进行缓存或不缓存的。

Vcl_recl:    将匹配的数据放到varnish中

Vcl_fetch:   后端已获得数据并对其进行处理，并将处理后的数据返回给Browser是的操作。

Vcl_hash:  确定找到request的已使用的哈希key就进行的操作。

Vcl_miss:  当无法在缓存里面找到相应请求，这个就是SA对Varnish的操作，并不在后端和用户的范围内。

Vcl_pass:  将转换为最小的缓存服务不可处理的数据然后调给后端。这样做的原因是为了减轻后端的负担。

Vcl_hit：    在缓存服务器上可以直接找到数据然后就返回给用户，并不需要经过后端。

Vcl_deliver: 在(来自于缓存或后端web服务的)应答对象送到客户端前的操作。

Vcl_pipe:  不经过缓存服务器，直接去到后端让后端进行处理。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>49</wp:post_id>
		<wp:post_date>2010-09-03 18:02:32</wp:post_date>
		<wp:post_date_gmt>2010-09-03 10:02:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>varnish%e5%87%bd%e6%95%b0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324831227]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>N900导出短信</title>
		<link>http://mgtuiw.blogcn.com/archives/48</link>
		<pubDate>Wed, 08 Sep 2010 02:42:01 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[N900]]></category>

		<category domain="category" nicename="n900"><![CDATA[N900]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/70991953201088104149620</guid>
		<description></description>
		<content:encoded><![CDATA[<code style="color: green;"  >echo "<table>" > /home/user/MyDocs/output.html<br /> <br /> sqlite3 -html /home/user/.rtcom-eventlogger/el-v1.db "SELECT start_time,service_id,event_type_id,free_text, remote_uid FROM Events ORDER BY  start_time DESC;" >> /home/user/MyDocs/output.html<br /> <br /> echo "</table>" >> /home/user/MyDocs/output.html</code> <br /> <br /> 在这里可以看到，N900将短信（就是我发出去和收到的）储存在/home/user/.rtcom-eventlogger/el-v1.db这个数据库文件里面。通过sqlite3可以导出这些数据<br />导出来的格式是html来的，这样可以很方便在浏览器上查看。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>48</wp:post_id>
		<wp:post_date>2010-09-08 10:42:01</wp:post_date>
		<wp:post_date_gmt>2010-09-08 02:42:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>n900%e5%af%bc%e5%87%ba%e7%9f%ad%e4%bf%a1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324831146]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>标准输出</title>
		<link>http://mgtuiw.blogcn.com/archives/47</link>
		<pubDate>Mon, 20 Sep 2010 08:43:52 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[system]]></category>

		<category domain="category" nicename="system"><![CDATA[system]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/70991953201082044311568</guid>
		<description></description>
		<content:encoded><![CDATA[无论在哪些环境里面（如进入mysql里执行的命令，在Terminal里运行命令后的输出，输入程序得出的输出）的输出，都可认为是标准输出，都是可以进行处理（如使用sed, awk, grep, cut.......)的。</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>47</wp:post_id>
		<wp:post_date>2010-09-20 16:43:52</wp:post_date>
		<wp:post_date_gmt>2010-09-20 08:43:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%a0%87%e5%87%86%e8%be%93%e5%87%ba</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324831114]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>rails的表示方式</title>
		<link>http://mgtuiw.blogcn.com/archives/46</link>
		<pubDate>Sat, 25 Sep 2010 10:01:55 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[rails]]></category>

		<category domain="category" nicename="rails"><![CDATA[rails]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/7099195320108256155145</guid>
		<description></description>
		<content:encoded><![CDATA[app/view/name.html.erb --  中文叫做视图，其实只作显示的一堆页面罢了。它们只显示app/controller/name_controller.rb里面函数的输出信息。 name_controller.rb也就一堆函数罢了，它们不可以做出任何显示的内容,只是将结果传给app/view/name.html.erb让它来显示。它们俩是对应的，两者缺一不可。文件名也一定要对应起来！
它们的关系是：　controller ----------&gt; view ---------------&gt; 浏览器
而解析过程就是：
----------&gt;config/routes.rb  -----------&gt;app/controller/name_controller.rb  --------------------------&gt; app/view/name.html.erb,
当app/view/name.html.erb没有内容时，浏览器会报下面的错误信息的：
&lt;code style="color: green;"&gt;Missing template main/name with {:locale=&gt;[:en, :en],  :formats=&gt;[:html], :handlers=&gt;[:rxml, :builder, :erb, :rjs,  :rhtml]} in view paths "/data/photo/app/views"&lt;/code&gt;
从错误信息上面看得 出，原来app/views/里面的东西都只一些模板，而内容呢就是app/controller/name_controller.rb里面的东西。这 样可以拿一部手机去比喻它们间的关系：我手机上那几寸大的屏幕就是app/view/name.html.erb,  而手机后面的芯片组就是app/controller/nmae_controller!

Controller前面还有一层，那就是模型层。模型层是代码与数据库之间的那道门。除非通过模型,否则应用程序无法从数据库获得任何东西,当然也无法把任何东西写回数据库。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>46</wp:post_id>
		<wp:post_date>2010-09-25 18:01:55</wp:post_date>
		<wp:post_date_gmt>2010-09-25 10:01:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rails%e7%9a%84%e8%a1%a8%e7%a4%ba%e6%96%b9%e5%bc%8f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324831050]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>覆盖的不同方式</title>
		<link>http://mgtuiw.blogcn.com/archives/45</link>
		<pubDate>Thu, 28 Oct 2010 09:46:37 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[system]]></category>

		<category domain="category" nicename="system"><![CDATA[system]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/70991953201092854637747</guid>
		<description></description>
		<content:encoded><![CDATA[下面是我和一朋友的对话，里面具体说是CP和MV不同的覆盖方式。<br />
<code style="color: green;">me:  请教您一问题：目录下有一个有内容的message文件，当我在touch message时，没任何提示，直接回车。当我打开message的时候，发现还是原来的文件，那我touch的文件到哪里去了？<br />
XX:  touch了message了呀<br />
touch不是清空文件呀<br />
你是不是想把message文件清空？<br />
me:  对，我的意思是要新建一个文件<br />
不过跟message重名而已<br />
我是想用新的文件覆盖旧的文件<br />
XX:  touch的意思是： 如果有文件存在， 只是更新一下文件的时间，<br />
当文件不存在时， 才会创建文件<br />
me:  只是更新时间啊！<br />
XX:  嗯。清空的话， 可以使用: echo "" > message<br />
>才会写文件<br />
me:  对啊，我刚才看了一下，真的只更新了时间<br />
me:  不是这样的，我是不明白如果一个同名的文件覆盖同名的文件是直接删除文件呢还是文件还是存在的？<br />
是直接删除旧的文件还是旧文件还存在，只是不可见？<br />
XX:  重新写指定的文件。<br />
写完后， 内容就变化 了<br />
me:  那么说，新的文件会在旧文件里面写内容，不过旧的文件内容依然存在，是不是这样？<br />
me:  我懂了，覆盖只是将文件里面的数据给更新，而旧文件里面的内容将会被新文件给替换了<br />
XX's new status message - I'm not here right now   4:53 PM<br />
me:  如果新文件里面没有内容，覆盖后message文件里面也是没内容的<br />
这是CP的结果<br />
XX:  就是open和write函数。<br />
me:  MV的结果就不同了。<br />
XX:  也是一样的。 如果是同名的意义是一样的。<br />
me:  不一样的，MV后I节点改变了<br />
CP的时候I节点却没有变<br />
MV是不是将旧文件删除了然后将新文件放进去呢？<br />
XX:  不是。<br />
me:  是的，我在FreeBSD里面测试过了，的确改变了！<br />
me:  MV的结果就是将文件所在的block移到新的目录。<br />
XX:  嗯。 是不同， 但是也不是你说的“block移到新目录“<br />
me:  我是觉得一个文件就是一个存放数据的块而已，而这个块就是由i节点就是这个块的门牌而已，那这个i节点移到新的地方，那里面的数据块也会移过去<br />
这是我个人理解<br />
me:  要么就是message所在的文件夹修改message的节点，使其指到新的数据块中<br />
XX:  这里有两种情况，  ：两个文件是否在同一分区<br />
每个分区有自己的inode列表<br />
[jessinio@niowork tmp]$ ls -i show<br />
24969635 show<br />
[jessinio@niowork tmp]$ ls -i do.sh<br />
24969340 do.sh<br />
[jessinio@niowork tmp]$ mv show do.sh<br />
[jessinio@niowork tmp]$ ls -i do.sh<br />
24969635 do.sh<br />
这个例子是同一个分区的， 只是修改一个入口inode<br />
[jessinio@niowork tmp]$ ls -i /boot/newfile<br />
6025 /boot/newfile<br />
[jessinio@niowork tmp]$ ls -i do.sh<br />
24969635 do.sh<br />
[jessinio@niowork tmp]$ sudo mv /boot/newfile do.sh<br />
[jessinio@niowork tmp]$ ls -i do.sh<br />
24969282 do.sh<br />
这个例子是不同分区的，<br />
有一个新的inode<br />
XX:  不同分区的情况下， 才是把旧的文件删除。<br />
你说到了一种。<br />
不错。<br />
有进步<br />
使用strace这个命令可以清楚地看出mv命令都在做了些什么事情。<br />
不知道freeBSD下使用什么工具可以知道mv到底干了些什么事。<br />
XX's new status message - 又一次讨论问题讨到这么晚~~~~   5:18 PM<br />
me:  FreeBSD里面也有strace这个命令<br />
XX:  嗯。那就行<br />
me:  不过要安装才可以的<br />
XX:  这个工具应该是GPL的， 所以需要安装。<br />
me:  照你这么说就是在不同分区中，mv一次就是将数据块稳到了被覆盖的文件的分区那边对啊？<br />
XX:  数据块是“移动"不了的。<br />
只有重新把数据都读出来， 写到新的文件上， 然后再把旧的文件删除<br />
me:  原来这样！<br />
是作删除然后新建<br />
XX:  你看看下面的信息：<br />
当我运行： strace mv /boot/newfile do.sh<br />
mv命令首先rename("/boot/newfile", "do.sh")        = -1 EXDEV (Invalid cross-device link)<br />
但是出错了， 因为是在不同的分区<br />
然后unlink("do.sh")<br />
删除文件后，<br />
open("do.sh", O_WRONLY|O_CREAT, 0100644) = 4<br />
me:  那么在同一分区内进行MV覆盖，旧的文件是不是被删除了呢？<br />
XX:  你说的“旧的文件“是指哪个？<br />
mv old new<br />
old这个文件当然是要删除的了<br />
me:  嗯！</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>45</wp:post_id>
		<wp:post_date>2010-10-28 17:46:37</wp:post_date>
		<wp:post_date_gmt>2010-10-28 09:46:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e8%a6%86%e7%9b%96%e7%9a%84%e4%b8%8d%e5%90%8c%e6%96%b9%e5%bc%8f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324830973]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>html&amp;&amp;css</title>
		<link>http://mgtuiw.blogcn.com/archives/44</link>
		<pubDate>Fri, 05 Nov 2010 02:22:57 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[css]]></category>

		<category domain="category" nicename="css"><![CDATA[css]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/70991953201010510156572</guid>
		<description></description>
		<content:encoded><![CDATA[<code style="color: green;"> #container { width:400px; color:white; list-style:none; padding-left:0;}<br />#container li{ float:left; background-color:#292929; border-left:1px solid black; border-right:1px solid #3c3c3c; padding:10px;} <br />#container li:first-child {border-top: none;}<br />li:last-child {border-bottom:none;}
</code><br /><b>上面是一个让ul里面的各个li可以和谐相处的秘决。</b><br />一个让我整天脑痛的事就是各li中的字体要怎样才能真正的居中对齐呢？直到今天我才明白，使用padding吧。padding:10px就是将字体四周撑大10px,那它就会只呆在中间了！<br />还有就是我希望每个li元素间都有一条线隔开。不过当使用border-left/border-right的时候，两个相邻的li元素的线条会重叠，变会很宽的一条。现在不会了，因为有了：<br /><code style="color: green;">#container li:first-child{border-left:none;}<br />
#container li:last-child{border-right:none;}<br /><br /></code>
<br />
让一个div居中的方法原来也不难。主要是以下的写法：<br />
<code style="color: green;">position:relative; margin:0 auto;</code><br />
有这两个即可]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>44</wp:post_id>
		<wp:post_date>2010-11-05 10:22:57</wp:post_date>
		<wp:post_date_gmt>2010-11-05 02:22:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>htmlcss</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324830919]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Gentoo安装备忘</title>
		<link>http://mgtuiw.blogcn.com/archives/43</link>
		<pubDate>Tue, 23 Nov 2010 06:23:51 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[gentoo]]></category>

		<category domain="category" nicename="gentoo"><![CDATA[gentoo]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/709919532010102322351911</guid>
		<description></description>
		<content:encoded><![CDATA[之前觉得安装gentoo不是一件容易的事！现在重温下怎样安装gentoo，想使用一下传说中的ext4性能。
下面摘自http://blog.prosight.me/index.php/2009/07/151的一个安装过程
<blockquote>
ext4出来了，但是gentoo官方文档并没有具体介绍如何安装带ext4支持的gentoo。 昨天试了一下，记录下来：
<h3>
1. 事前准备</h3>
1a. 设置root密码
# passwd
New password: （输入新密码）
Re-enter password: （再次输入密码）
1b. 启动ssh
/etc/init.d/sshd start
1c. 网络准备
如果启动的时候，发现没有eth0网卡，可能是没有获得到ip地址，而不是网卡没有找到。
输入
# dhcpcd eth0
重新获得ip地址就可以看到网卡找到了
<h3>
2. 预备磁盘</h3>
2a. fdisk分区
# fdisk /dev/sda
常用命令：p 显示当前分区， n 创建新分区
创建boot分区
n创建分区
p选择主分区类型
从第一个柱面开始
＋32M 设定boot分区大小为32M
a 建立启动标记
1 选择第一个分区即boot分区为启动分区
如果你再次按p键，你就会注意到，在“Boot”那一列有个*
我们需要把这个分区设置成可启动的。键入a来给分区添加启动标志，然后键入1。如果你再次按p键，你就会注意到，在“Boot”那一列有个*
创建交换分区
方式跟创建boot分区一样
t 更改分区类型为swap， 输入82
保存分区布局
键入w来保存分区布局并退出fdisk。
分区的例子
Device Boot      Start         End      Blocks   Id  System
/dev/sda1   *           1           5       40131   83  Linux
/dev/sda2               6        6533    52436160   83  Linux
/dev/sda3            6534        8101    12594960   82  Linux swap / Solaris
/dev/sda4            8102       38913   247497390    5  Extended
/dev/sda5            8102       14629    52436128+  83  Linux
/dev/sda6           14630       38913   195061198+  83  Linux
sda1 /boot 32M
sda2 / 50G
sda3 swap 12G
sda5 /usr 50G
sda6 /data 184G
2b. 创建文件系统
格式化分区
将sda1格式化为ext3，其余格式化为ext4
# mke2fs -j /dev/sda1
# mkfs.ext4 /dev/sda2
# mkfs.ext4 /dev/sda5
# mkfs.ext4 /dev/sda6
激活交换分区
创建交换分区标志
# mkswap /dev/sda3
激活交换分区
# swapon /dev/sda3
2c.挂载
# mount /dev/sda2 /mnt/gentoo
# mkdir /mnt/gentoo/boot
# mount /dev/sda1 /mnt/gentoo/boot
如果独立创建/usr分区（emerage 的下载的文件都保存在/usr/src下，所以建议独立分区），则执行
# mkdir /mnt/gentoo/usr
# mount /dev/sda5 /mnt/gentoo/usr
<h3>
3.安装Gentoo安装文件</h3>
3a.安装一个Stage Tarball
解开stage
# cd mnt/gentoo
# tar xvjpf stage3-*.tar.bz2
p表示保留权限
3b. 安装Portage
从网上下载和安装Portage快照
# cd /mnt/gentoo
# links http://www.gentoo.org/main/en/mirrors.xml
选择一个离你最近的镜像，打开snapshots/目录。然后选择最新的Portage快照（portage-latest.tar.bz2）并按D来下载它。
现在按Q来退出浏览器。你现在已经有一个Portage快照保存在/mnt/gentoo里了。
校验Portage快照的完整性
# md5sum -c portage-latest.tar.bz2.md5sum
portage-latest.tar.bz2: OK
解开Portage快照
# tar xvjf /mnt/gentoo/portage-latest.tar.bz2 -C /mnt/gentoo/usr
3c.配置编译选项
# nano -w /mnt/gentoo/etc/make.conf
CHOST 不需要更改
其他的根据你的机器的配置来，如：
CFLAGS=”-march=core2 -mfpmath=sse,387 -O2 -pipe -fomit-frame-pointer -mmmx -msse -msse2 -msse3″
CXXFLAGS=”${CFLAGS}”
LDFLAGS=”-Wl,-O2″
－march和mtune具体参数的含义参见：http://gcc.gnu.org/onlinedocs/gcc-4.4.0/gcc/i386-and-x86_002d64-Options.html#i386-and-x86_002d64-Options
<h3>
4. 安装Gentoo基本系统</h3>
4a.chroot
选择境像站点
# mirrorselect -i -o >> /mnt/gentoo/etc/make.conf
拷贝DNS信息
# cp -L /etc/resolv.conf /mnt/gentoo/etc/
挂载/proc和/dev文件系统
# mount -t proc none /mnt/gentoo/proc
# mount -o bind /dev /mnt/gentoo/dev
进入新的系统环境
# chroot /mnt/gentoo /bin/bash
# env-update
>> Regenerating /etc/ld.so.cache…
# source /etc/profile
# export PS1=”(chroot) $PS1″
4b. 配置Portage
更新Portage树
# emerge –sync
配置USE变量
nano -w /etc/make.conf
配置Locales
nano -w /etc/locale.gen
添加zh_CN.UTF-8 UTF-8
运行
＃locale-gen
生成local.gen文件
<h3>
5. 配置内核</h3>
5.a. 时区
cp /usr/share/zoneinfo/PRC /etc/localtime
设置PRC为当前时区
5.b. 安装源码
emerge gentoo-sources
gentoo-sources 为一般用途，只打了一般的安全补丁
hardened-sources 服务器用途， 安全性和稳定性有所提高
5.c. 手动配置内核
安装工具
emerge pciutils
用lspci检查当前系统配置
配置内核
# cd /usr/src/linux
# make menuconfig
根据你的硬件和你的需要选择对应的选项，主要就是网卡和文件系统两方面
因为要支持ext4，特别注意file system中有关ext4的设置。把相关内容都选上
编译内核
之后，使用make &#038;& make modules_install来编译内核
安装内核
编译后，执行下面命令来安装内核
cp arch/x86_64/boot/bzImage /boot/kernel-2.6.29-gentoo-r5
其中kernel-2.6.28-gentoo-r9根据你使用的内核和版本来定。 在/usr/src里面可以看到你之前下载的linux内核源码，可以查看到版本号
<h3>
6. 配置系统</h3>
6.a. 文件系统信息
创建/etc/fstab
/etc/fstab使用一种特殊语法格式。每行都包含六个字段。这些字段之间由空白键（空格键，tab键，或者两者混合使用）分隔。每个字段都有自己的含意：
? 第一个字段是对分区的描述，也就是设备文件的路径
? 第二个字段是分区挂载点，也就是分区应该挂载到的地方
? 第三个字段给出分区所用的文件系统
? 第四个字段给出的是挂载分区时mount命令所用的挂载选项。由于每个文件系统都有自己的挂载选项，我们建议你阅读mount手册（man mount）以获得所有挂载选项的列表。多个挂载选项之间是用逗号分隔的。
? 第五个字段是给dump使用的，用以决定这个分区是否需要dump。一般情况下，你可以把该字段设为0（零）。
? 第六个字段是给fsck使用的，用以决定系统非正常关机之后文件系统的检查顺序。根文件系统应该为1，而其它的应该为2（如果不需要文件系统自检的话可以设为0）
另外一个使用了ext4的例子
/dev/sda1  /boot  ext3  noauto,noatime 1 2
/dev/sda2  /   ext4  noatime   0 1
/dev/sda3  none  swap sw    0 0
/dev/sda5  /usr   ext4  noatime   0 2
/dev/sda6  /data  ext4  noatime   0 2
/dev/cdrom  /mnt/cdrom auto  noauto,ro  0 0
auto选项可以使mount猜测文件系统（推荐对于可移动设备采用这个选项，因为它们可能采用很多不同的文件系统），而user选项使得非root用户可以挂载光驱。
为了提高性能，大部分用户会添加noatime挂载选项。由于不记录该分区中文件的访问时间（一般来说你并不需要知道它），这个选项能够提高系统速度。
6.b. 网络信息
设定主机名
# nano -w /etc/conf.d/hostname
配置你的网络
# nano -w /etc/conf.d/net
为了输入你自己的IP地址，子网掩码和网关，你需要设置config_eth0和routes_eth0：
手动为eth0设置IP信息
config_eth0=( “192.168.0.2 netmask 255.255.255.0 brd 192.168.0.255″ )
routes_eth0=( “default via 192.168.0.1″ )
如果你使用DHCP，请定义一下config_eth0：
config_eth0=( “dhcp” )
在启动时自动启用网络
# rc-update add net.eth0 default
6.c. 系统信息
设置root密码
# passwd
修改系统信息
# nano -w /etc/rc.conf
比如把默认的编辑器改为vi
设置键盘布局
# nano -w /etc/conf.d/keymaps
设置时钟选项
# nano -w /etc/conf.d/clock
如果你机器上的钟不用UTC，你需要在文件钟加上CLOCK=”local”。否则，你的时钟就有可能出现偏差。
<h3>
7. 安装必要的系统工具</h3>
7.a. 系统日志工具
# emerge syslog-ng
# emerge logrotate
# rc-update add syslog-ng default
7.b. Cron守护进程
# emerge vixie-cron
# rc-update add vixie-cron default
7.c. 文件索引
# emerge slocate
7.e. 网络工具
安装一个DHCP客户端
# emerge dhcpcd
<h3>
8. 配置引导程序</h3>
8a. 使用GRUB
安装GRUB
# emerge grub
尽管现在已经安装完GRUB，我们仍需要为其写一个配置文件，并将其安置到硬盘的主引导记录中，使它能自动引导您新创建的内核。您可以使用nano（或其他可用的编辑器）来创建配置文件/boot/grub/grub.conf：
# nano -w /boot/grub/grub.conf
例如
# 默认选择哪个列表来引导。0表示第一个， 1表示第二个，以此类推。
default 0
# 引导默认列表前等待多少秒
timeout 30
# 使用漂亮、“臃肿”的spalsh图像来增加一点趣味:)
# 如果您没有安装显卡，请将这行注释掉
splashimage=(hd0,0)/boot/grub/splash.xpm.gz
title Gentoo Linux 2.6.29-r5
# 内核镜像（或者操作系统）所在分区
root (hd0,0)
kernel /boot/kernel-2.6.29-gentoo-r5 root=/dev/sda2
＃ 如果使用ext4格式的分区，需要使用下面的参数
kernel /boot/kernel-2.6.29-gentoo-r5 root=/dev/sda2 rootfs=ext4
title Gentoo Linux 2.6.29-r5 (rescue)
# 内核镜像（或者操作系统）所在分区
root (hd0,0)
kernel /boot/kernel-2.6.29-gentoo-r5 root=/dev/sda2 init=/bin/bb
# 接下来的四行只有在您与Windows系统进行双启动的情况下才需要。
# 本例中，windows系统位于/dev/sda6。
title Windows XP
rootnoverify (hd0,5)
makeactive
chainloader +1
使用grub-install安装GRUB
为了安装GRUB，您将需要执行grub-install命令。尽管如此，当我们处于chroot的环境时，grub-install并不能正常的 工作。我们还需要创建一个/etc/mtab，在里面列出所有已加载的文件系统。幸运的是，有一个简单的方法来完成这个任务——将/proc /mounts拷贝成/etc/mtab，如果您没有创建一个独立的boot分区，请排除rootfs行。下面的命令在两种情况下都可以正常工作：
# grep -v rootfs /proc/mounts > /etc/mtab
现在我们就可以用grub-install来安装GRUB了：
# grub-install –no-floppy /dev/sda
将ssh加入到启动进程
rc-update add sshd default
8b. 重启系统
# exit
cdimage ~# cd
cdimage ~# umount /mnt/gentoo/boot /mnt/gentoo/dev /mnt/gentoo/proc /mnt/gentoo
cdimage ~# reboot</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>43</wp:post_id>
		<wp:post_date>2010-11-23 14:23:51</wp:post_date>
		<wp:post_date_gmt>2010-11-23 06:23:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gentoo%e5%ae%89%e8%a3%85%e5%a4%87%e5%bf%98</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324830887]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>由UFS的Soft Updates引申到的</title>
		<link>http://mgtuiw.blogcn.com/archives/42</link>
		<pubDate>Thu, 25 Nov 2010 03:48:41 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[FreeBSD]]></category>

		<category domain="category" nicename="freebsd"><![CDATA[FreeBSD]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/7099195320101025111831763</guid>
		<description></description>
		<content:encoded><![CDATA[在FreeBSD中开启UFS的Soft Updates,只需要用下的一行命令：
<code style="color: green;"># tunefs -n enable /</code>
禁用：
<code style="color: green;"># tunefs -n disable /</code>
输入这个命令时最好是在单用户模式下进行。
查看UFS是否已开启Soft Updates,只需要输入<code style="color: green;">mount </code>即可。如
<code style="color: green;">IN[~]&gt;&gt;&gt;mount /dev/ad0s1a on / (ufs, local, soft-updates) devfs on /dev (devfs, local, multilabel) /dev/ad0s1h on /data (ufs, local, soft-updates) /dev/ad0s1f on /home (ufs, local, soft-updates) /dev/ad0s1d on /tmp (ufs, local, soft-updates) /dev/ad0s1g on /usr (ufs, local, soft-updates) /dev/ad0s1e on /var (ufs, local, soft-updates) IN[~]&gt;&gt;&gt;</code>

下面来看下什么是Soft Updates吧.
<blockquote>
<div>
<h3><a id="AEN17038" rel="nofollow" name="AEN17038">Soft Updates 的详细资料</a></h3>
　　 有两种传统的方法来把文件系统的元数据 (meta-data) 写入磁盘。 (Meta-data更新是更新类似 inodes 或者目录这些没有内容的数据)

　　 从前，默认方法是同步更新这些元数据(meta-data)。 如果一个目录改变了，系统在真正写到磁盘之前一直等待。 文件数据缓存(文件内容)在这之后以非同步形式写入。 这么做有利的一点是操作安全。如果更新时发生错误，元数据(meta-data) 一直处于完整状态。文件要不就被完整的创建要不根本就不创建。 如果崩溃时找不到文件的数据块，<a rel="nofollow" href="http://www.freebsd.org/cgi/man.cgi?query=fsck&amp;sektion=8"><span><span>fsck</span>(8)</span></a> 可以找到并且依靠把文件大小设置为 0 来修复文件系统。 另外，这么做既清楚又简单。缺点是元数据(meta-data)更新很慢。例如 <tt>rm -r</tt> 命令，依次触及目录下的所有文件， 但是每个目录的改变(删除一个文件)都要同步写入磁盘。 这包含它自己更新目录，inode 表和可能对文件分散的块的更新。 同样问题出现大的文件操作上(比如 <tt>tar -x</tt>)。

　　 第二种方法是非同步元数据更新。这是 Linux/ext2fs 和 *BSD ufs 的 <tt>mount -o async</tt> 默认的方法。所有元数据更新也是通过缓存。 也就是它们会混合在文件内容数据更新中。 这个方法的优点是不需要等待每个元数据更新都写到磁盘上， 所以所有引起元数据更新大的操作比同步方式更快。同样， 这个方法也是清楚且简单的，所以代码中的漏洞风险很小。 缺点是不能保证文件系统的状态一致性。如果更新大量元数据时失败 (例如掉电或者按了重启按钮)，文件系统会处在不可预知的状态。 系统再启动时没有机会检查文件系统的状态；inode 表更新的时候可能文件的数据块已经写入磁盘了但是相关联的目录没有，却不能用 <tt>fsck</tt> 命令来清理(因为磁盘上没有所需要的信息)。 如果文件系统修复后损坏了，唯一的选择是使用 <a rel="nofollow" href="http://www.freebsd.org/cgi/man.cgi?query=newfs&amp;sektion=8"><span><span>newfs</span>(8)</span></a> 并且从备份中恢复它。

　　 这个问题通常的解决办法是使用 <span><strong>dirty region logging</strong></span> 或者 <span><strong>journaling</strong></span> 尽管它不是一贯的被使用并且有时候应用到其他的事务纪录中更好。 这种方法元数据更新依然同步写入，但是只写到磁盘的一个小区域。 过后他们将会被移动到正确的位置。因为纪录区很小， 磁盘上接近的区域磁头不需要移动很长的距离，所以这些比写同步快一些。 另外这个方法的复杂性有限，所以出现错误的机会也很少。缺点是元数据要写两次 (一次写到纪录区域，一次写到正确的区域)。正常情况下， 悲观的性能可能会发生。从另一方面来讲， 崩溃的时候所有未发生的元数据操作可以很快的在系统启动之后从记录中恢复过来。

　　Kirk McKusick，伯克利 FFS 的开发者，用 Soft Updates 解决了这个问题：元数据更新保存在内存中并且按照排列的顺序写入到磁盘 (“有序的元数据更新”)。这样的结果是，在繁重的元数据操作中， 如果先前的更新还在内存中没有别写进磁盘，后来的更新就会捕捉到。 所以所有的目录操作在写进磁盘的时候首先在内存中执行 (数据块按照它们的位置来排列，所以它们不会在元数据前被写入)。 如果系统崩溃了这将导致一个固定的 “日志回朔”： 所有不知如何写入磁盘的操作都像没有发生过一样。文件系统的一致性保持在 30 到 60 秒之前。它保证了所有正在使用的资源被标记例如块和 inodes。崩溃之后， 唯一的资源分配错误是一个实际是“空闲”的资源的资源被标记为“使用”。 <a rel="nofollow" href="http://www.freebsd.org/cgi/man.cgi?query=fsck&amp;sektion=8"><span><span>fsck</span>(8)</span></a> 可以认出这种情况并且释放不再使用的资源。它对于忽略崩溃后用 <tt>mount -f</tt> 强制挂上的文件系统的错误状态是安全的。 为了释放可能没有使用的资源，<a rel="nofollow" href="http://www.freebsd.org/cgi/man.cgi?query=fsck&amp;sektion=8"><span><span>fsck</span>(8)</span></a> 需要在过后的时间运行。一个主意是用 <span><strong>后台 fsck</strong></span>：系统启动的时候只有一个文件系统的 <span><strong>快照</strong></span> 被记录下来。<tt>fsck</tt> 可以在过后运行。所有文件系统可以在“有错误”的时候被挂接， 所以系统可以在多用户模式下启动。接着，后台 <tt>fsck</tt> 可以在所有文件系统需要的时候启动来释放可能没有使用的资源。 (尽管这样，不用 Soft Updates 的文件系统依然需要通常的 <tt>fsck</tt>。)

　　 它的优点是元数据操作几乎跟非同步一样快 (也就是比需要两次元数据写操作的 <span><strong>logging</strong></span> 更快)。缺点是代码的复杂性(意味着对于丢失用户敏感数据有更多的风险) 和高的内存使用量。另外它有些特点需要知道。崩溃之后， 文件系统状态会“落后”一些。同步的方法用 <tt>fsck</tt> 后在一些地方可能产生一些零字节的文件， 这些文件在用 Soft Updates 文件系统之后不会存在， 因为元数据和文件内容根本没有写进磁盘(可能发生在运行 <tt>rm</tt> 之后)。这可能在文件系统上安装大量数据时候引发问题， 没有足够的剩余空间来两次存储所有文件。

</div></blockquote>
来自：<a rel="nofollow" href="http://cnsnap.cn.freebsd.org/doc/zh_CN.GB2312/books/handbook/configtuning-disk.html">http://cnsnap.cn.freebsd.org/doc/zh_CN.GB2312/books/handbook/configtuning-disk.html</a>

从这里我又开始不知道一件事了：那什么是元数据呢？

我看了一些资料得到的结果是：<strong>元数据就类似于文件系统的 <em>i node</em>.</strong>

下面是来自一篇<a rel="nofollow" href="http://www.ikent.me/blog/2213">blog</a>(请原谅我经您同意就转载您成果！):
<blockquote>
<h3><a title="什么是元数据（MetaData）" rel="nofollow" href="http://www.ikent.me/blog/2213">什么是元数据（MetaData）</a></h3>
<div style="font-size: 13px; color: #999999; margin: 20px 0pt 0pt; line-height: 1.7; font-family: 楷体_GB2312,楷体;">

元数据（Meta Date），关于数据的数据或者叫做用来描述数据的数据或者叫做信息的信息

</div>
<span style="font-size: small;"> 在读<a rel="nofollow" href="http://www.douban.com/subject/3169342/" target="_blank">《Web信息架构》</a>的时候第九章讲到叙词表、受控词表和元数据。当时书中的定义很模糊，所讲的篇幅也少，就没有在意，一直也没有能完全理解。今天在读<a rel="nofollow" href="http://www.douban.com/subject/4076216/" target="_blank">《锦绣蓝图》</a>的时候第四章中再次提到元数据这个概念。遂多查了些资料认真的理解了一下。
</span>

<span style="font-size: medium;">什么是元数据？</span><span style="font-size: small;">
</span>

<span style="font-size: small;"> <strong>元数据（Meta Date），关于数据的数据或者叫做用来描述数据的数据或者叫做信息的信息。</strong>
这些定义都很是抽象，我们可以把元数据简单的理解成，<strong>最小的数据单位</strong>。元数据可以为数据说明其元素或属性（名称、大小、数据类型、等），或其结构（长度、字段、数据列），或其相关数据（位于何处、如何联系、拥有者）。
</span>

<span style="font-size: small;"> 举几个简单的例子：
使用过数码相机的同学都应该知道，每张数码照片都会存在一个EXIF信息。它就是一种用来描述数码图片的元数据。根据</span><a rel="nofollow" href="http://baike.baidu.com/view/22006.htm" target="_blank"><span style="font-size: small;">EXIF标准</span></a><span style="font-size: small;">，这些元数据包括：Image Description(图像描述、来源. 指生成图像的工具 )、Artist(作者)、Make( 生产者)、Model (型号)、….、等等。
生活中我们填写的《个人信息登记表》，包括姓名、性别、民族、政治面貌、一寸照片、学历、职称等等这些就是锁定kent.zhu这个人的元数据。
</span>

<span style="font-size: small;"> 通常情况下元数据可以分为以下三类：<strong>固有性元数据、管理性元数据、描述性元数据</strong>。</span>
固有性元数据；与事物构成有关的元数据。
<span style="font-size: small;">管理性元数据；与事物处理方式有关的元数据。</span>
<span style="font-size: small;">描述性元数据；与事物本质有关的元数据。</span>
<span style="font-size: small;">当然，并不是说所数据总能清晰的划分在以上3类中。比如：一张由kent拍摄的大小为20K的JPG格式的印着一只小狗的圣诞卡照片。
它的固有性元数据包括：20K、JPG；管理性元数据：kent拍摄、圣诞卡；描述性元数据：狗、小狗、圣诞、照片、圣诞节、…
但是，圣诞卡则可以放在以上任何一个分类中。与事物构成有关（说明这个东东是什么）、与事物处理方式有关（说明这个东东的用途是什么）、与事物本质有关（可以直接用来描述这个东东）。
</span>

<span style="font-size: medium;">元数据之于信息架构的意义</span><span style="font-size: small;">
</span>

<span style="font-size: small;"> 元数据是一种很有效的方法，用以确保网站上各种形式的内容确实都能被查找到。比如我们常常为搜索很久之前看到的一张美女图片犯愁，而如果一个图片网站如果信息架构足够好，我们就能凭借我们回忆到的元数据（关于武藤兰的？2000年拍摄的？）清晰的找到。
<strong>元数据之于信息架构就像是房子的砖瓦</strong>，它可以根据需要摆放成不同的信息检索系统。元数据是所有组织系统的基础，从搜索到电子商务网站上的导航系统都强烈的依赖于元数据。
前面提到，<strong>元数据实际上是为产品的可查找性（Findability）服务的</strong>。而用户在查找信息的时候不会按照机器思维去找（不会输入该照片的ID），而是直接输入关于信息的描述性信息如：“小狗 圣诞卡”。也就意味着在创建关于描述性元数据的时候要尽量的提取出任官关于这个对象所讲述的故事，这些才是人们能记住的和习惯搜索的细节。
</span>

<span style="font-size: small;"> 我们会发现，机械生成的元数据常常是不靠谱的，如在UCH系统下发布日志的时候系统会自动根据标题进行机械分析生成的一些元数据。
而充分利用手工元数据（handcrafted metadate）是提高可查找性的一个好方法。最常见的例子就是我们见到的Tag。Tag就是一种用户自创的元数据，其特点是无层次结构、自定义。比如</span><span style="font-size: small;"><a rel="nofollow" href="http://www.flickr.com/photos/keso/4277874617/" target="_blank"><span style="font-size: small;">这张Flickr照片</span></a></span><span style="font-size: small;">下的手工元数据就为在Flickr上查找提供了更多的方便。</span></blockquote>
关于Soft update的性能，在使用中才会真正体会到。
下面的一个连接是关于UFS的一些讨论，觉得很精彩，所以将其放到这里，有空时再去看看。
<a rel="nofollow" href="http://www.freebsdchina.org/forum/viewtopic.php?p=231614&amp;sid=05d01389f9ad8cc7204939739e391c76">http://www.freebsdchina.org/forum/viewtopic.php?p=231614&amp;sid=05d01389f9ad8cc7204939739e391c76</a>
在网上看过一句话，觉得很有道理：
<strong>如果您想深入理解它，就先让它RUN起来</strong>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>42</wp:post_id>
		<wp:post_date>2010-11-25 11:48:41</wp:post_date>
		<wp:post_date_gmt>2010-11-25 03:48:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%94%b1ufs%e7%9a%84soft-updates%e5%bc%95%e7%94%b3%e5%88%b0%e7%9a%84</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324830825]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>freebsd ports回到旧版本</title>
		<link>http://mgtuiw.blogcn.com/archives/41</link>
		<pubDate>Tue, 30 Nov 2010 16:56:58 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[FreeBSD]]></category>

		<category domain="category" nicename="freebsd"><![CDATA[FreeBSD]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/70991953201011105313790</guid>
		<description></description>
		<content:encoded><![CDATA[今天更新了ports，主要目的是为安装fcitx4.0.安装完fcitx4.0后就后悔了！因为习惯了之前我修改过的fcitx3.6的界面，突然给 我看到了这个界面，很不习惯。fcitx4.0的修改方法又和3.6不同。所以我就想回到3.6上面。下面是修改了ports-supfile文件就可以 顺利进回退到旧的版本：

<code># Defaults that apply to all the collections
#
# IMPORTANT: Change the next line to use one of the CVSup mirror sites
# listed at http://www.freebsd.org/doc/handbook/mirrors.html.
*default host=cvsup.cn.FreeBSD.org
*default base=/var/db
*default prefix=/usr
*default release=cvs tag=.
<span style="color: #ff0000;">*default date=2010.11.15.00.00.00</span>
*default delete use-rel-suffix

# If you seem to be limited by CPU rather than network or disk bandwidth, try
# commenting out the following line.  (Normally, today's CPUs are fast enough
# that you want to run compression.)
*default compress

## Ports Collection.
#
# The easiest way to get the ports tree is to use the "ports-all"
# mega-collection.  It includes all of the individual "ports-*"
# collections,
#ports-all

# These are the individual collections that make up "ports-all".  If you
# use these, be sure to comment out "ports-all" above.
#
# Be sure to ALWAYS cvsup the ports-base collection if you use any of the
# other individual collections below. ports-base is a mandatory collection
# for the ports collection, and your ports may not build correctly if it
# is not kept up to date.
#ports-base
#ports-accessibility
#ports-arabic
#ports-archivers
#ports-astro
#ports-audio
#ports-benchmarks
#ports-biology
#ports-cad
<span style="color: #ff6600;">ports-chinese</span>
#ports-comms
#ports-converters
#ports-databases
#ports-deskutils
#ports-devel
#ports-dns
#ports-editors
#ports-emulators
#ports-finance
#ports-french
#ports-ftp
#ports-games
#ports-german
#ports-graphics
#ports-hebrew
#ports-hungarian
#ports-irc
#ports-japanese
#ports-java
#ports-korean
#ports-lang
#ports-mail
#ports-math
#ports-mbone
#ports-misc
#ports-multimedia
#ports-net
#ports-net-im
#ports-net-mgmt
#ports-net-p2p
#ports-news
#ports-palm
#ports-polish
#ports-ports-mgmt
#ports-portuguese
#ports-print
#ports-russian
#ports-science
#ports-security
#ports-shells
#ports-sysutils
#ports-textproc
#ports-ukrainian
#ports-vietnamese
#ports-www
#ports-x11
#ports-x11-clocks
#ports-x11-drivers
#ports-x11-fm
#ports-x11-fonts
#ports-x11-servers
#ports-x11-themes
#ports-x11-toolkits
#ports-x11-wm
</code>
里面红色部份的内容<strong>*default date=2010.11.15.00.00.00</strong>是回退到2010年11月15号时ports的内容.在这里我只让chinese部份更新，因为其它的都是今晚才更新了。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>41</wp:post_id>
		<wp:post_date>2010-12-01 00:56:58</wp:post_date>
		<wp:post_date_gmt>2010-11-30 16:56:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>freebsd-ports%e5%9b%9e%e5%88%b0%e6%97%a7%e7%89%88%e6%9c%ac</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324830768]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>lighttpd的日志文件的参数</title>
		<link>http://mgtuiw.blogcn.com/archives/40</link>
		<pubDate>Tue, 21 Dec 2010 03:10:47 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[lighttpd]]></category>

		<category domain="category" nicename="lighttpd"><![CDATA[lighttpd]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/7099195320101121111047918</guid>
		<description></description>
		<content:encoded><![CDATA[<div>

<code style="color:green;">%%     直接显示 % 号
%h     访问主机的名字和地址
%u     认证用户
%t     请求期限的时间戳
%r     请求行
%s     状态码
%b     传送给主体的字节
%i     Http头字段
%a     用户访问的IP地址
%A     本地地址
%B     和%b一样
%e     环境变量
%f     物理文件名
%H     请求的协议 (HTTP/1.0, ...)
%m     请求的方法 (GET, POST, ...)
%o     `回应头部`_
%p     服务器端口
%q     查询字符
%T     已使用的时间--以秒为单位
%U     请求的URL
%v     服务名字
%V     用户http请求的主机名
%X     连接状态
%I     上行的流量
%O     下行的流量</code>

<code>%{..}  这是accesslog模块提供了一个特别方法把应用程序的日志内容记录到日志文件里面。它可以记录会话ID到日志文件里面。</code>

<strong>例子：</strong>
<code style="color:green;">
accesslog.format = "%h %l %u %t \"%r\" %&gt;s %b \"%{Referer}i\" \"%{User-Agent}i\" \"%{X-LIGHTTPD-SID}o\"" </code>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>40</wp:post_id>
		<wp:post_date>2010-12-21 11:10:47</wp:post_date>
		<wp:post_date_gmt>2010-12-21 03:10:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lighttpd%e7%9a%84%e6%97%a5%e5%bf%97%e6%96%87%e4%bb%b6%e7%9a%84%e5%8f%82%e6%95%b0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324830694]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>文本框的显示</title>
		<link>http://mgtuiw.blogcn.com/archives/39</link>
		<pubDate>Tue, 21 Dec 2010 15:13:02 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[html]]></category>

		<category domain="category" nicename="html"><![CDATA[html]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/709919532010112111132772</guid>
		<description></description>
		<content:encoded><![CDATA[原来
&lt;input&gt;里面的东西最好使用padding来撑，而不能用height设置它的高度，这样会由于各个浏览器的差异而显示不同的模样！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>39</wp:post_id>
		<wp:post_date>2010-12-21 23:13:02</wp:post_date>
		<wp:post_date_gmt>2010-12-21 15:13:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%96%87%e6%9c%ac%e6%a1%86%e7%9a%84%e6%98%be%e7%a4%ba</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324830583]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>proftpd使用虚拟用户</title>
		<link>http://mgtuiw.blogcn.com/archives/38</link>
		<pubDate>Wed, 05 Jan 2011 09:50:30 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[proftpd]]></category>

		<category domain="category" nicename="proftpd"><![CDATA[proftpd]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/7099195320110553942604</guid>
		<description></description>
		<content:encoded><![CDATA[昨天配置了proftpd,不过这样操作系统上的每个用户都可以登录.今天呢我希望只可以通过虚拟用户登录,系统用户无法登录.下面是配置文件中的一段配置,是支持用户登录的:
<span style="color: #008000;"><code>AuthOrder mod_auth_file.c mod_auth_unix.c
AuthUserFile /usr/local/etc/ftpd.passwd</code></span>
其中AutoOrder mod_auth_file.c mod_auth_unix.c就是先验证文件用户,再去认证系统用户的,在这里我只写了
<span style="color: #ff0000;">AutoOrder mod_auth_file.c</span>这样子系统就只会认证文件用户而不会去认证系统用户,如果文件里面没有这个用户 就无法登录.
而<span style="color: #008000;"><code>AuthUserFile /usr/local/etc/ftpd.passwd</code></span>中的<span style="color: #ff0000;">/usr/local/etc/ftpd.passwd</span>就是那个被认证的文件.
那怎样才能将用户放进去给ftp认证呢?那就用ftpasswd执行文件吧.
<span style="color: #008000;"><code>#ftpasswd --passwd --file=/usr/local/etc/ftpd.passwd --name=test --uid=99 --home=/usr/local/ftp/test --shell=/usr/sbin/nologin</code></span>
当执行上面的一行后会弹出一串字符要求输入密码了.(ftpasswd不是系统自带的,而是proftpd带过来的)
说下其中各个参数的意思吧:
--passwd :   就是提示您要输入密码的祸首了,也是用户登录要输入的密码.
--file=**      就是要认证的文件来的.
--name     就是什么用户可以登录我架设的proftpd.
--uid        用户的UID.在这里为什么要填99呢?不是意头好的意思,而是99正是nobody用户的ID.为了安全起见还是用nobody加上个nologin来吧!
--home= ** ftp下--name里面的用户的根目录来的.
--shell  用户要使用到的shell,这里使用nologin.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>38</wp:post_id>
		<wp:post_date>2011-01-05 17:50:30</wp:post_date>
		<wp:post_date_gmt>2011-01-05 09:50:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>proftpd%e4%bd%bf%e7%94%a8%e8%99%9a%e6%8b%9f%e7%94%a8%e6%88%b7</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324830487]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>lighttpd与nginx的性能比较</title>
		<link>http://mgtuiw.blogcn.com/archives/37</link>
		<pubDate>Tue, 25 Jan 2011 01:58:40 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[web]]></category>

		<category domain="category" nicename="web"><![CDATA[web]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/70991953201102595840695</guid>
		<description></description>
		<content:encoded><![CDATA[以下的测试是使用<b>http_load</b>来进行测试。

http_load的一些参数：<code style="color: blue;" mce_style="color: blue;"  >
-parallel/-p N：并发的用户进程数。
-fetches/-f N： 总计的访问次数
-rate/-p N：    每秒的访问频率
-seconds/-s N： 总计的访问时间</code>

下面是简单测试后的结果：

<code style="color: green;" mce_style="color: green;"  >
<code style="color: red;" mce_style="color: red;"  >IN[~]&gt;&gt;&gt;http_load -parallel 5 -fetches 1000 url.txt</code>
1000 fetches, 5 max parallel, 3.7365e+07 bytes, in 20.0007 seconds
37365 mean bytes/connection
49.9981 fetches/sec, 1.86818e+06 bytes/sec
msecs/connect: 0.097766 mean, 1.208 max, 0.043 min
msecs/first-response: 0.691867 mean, 2.7 max, 0.443 min
HTTP response codes:
code 200   1000
<font color="#000000"  >结果说明</font>：<code style="color: blue;" mce_style="color: blue;"  >1000  fetches，获得1000个请求，5个并发的进程，20.0007秒内在一共传输了3.7365e+07  bytes。每个进程的传输数据量的大小为37365bytes.每秒有49.9981个请求和1.86818e+06  bytes的数据。每一连接的响应时间为0.097766毫秒，最大响应时间为1.208毫秒，最小响应时间为0.043毫秒。第一次响应时间为 0.691867毫秒，最大的响应时间为2.7毫秒，最小的响应时候为0.443毫秒。响应页面的类型是200. 1000请求都为200！</code>
<code style="color: red;" mce_style="color: red;"  >IN[~]&gt;&gt;&gt;http_load -parallel 5 -fetches 1000 urls.txt </code>
1000 fetches, 5 max parallel, 3.7365e+07 bytes, in 39.9998 seconds
37365 mean bytes/connection
25.0001 fetches/sec, 934129 bytes/sec
msecs/connect: 0.129849 mean, 1.714 max, 0.047 min
msecs/first-response: 0.623193 mean, 4.695 max, 0.37 min
HTTP response codes:
code 200   1000
<font color="#000000"  >结果说明</font>：<code style="color: blue;" mce_style="color: blue;"  >1000  fetches，获得1000个请求，5个并发的进程，39.9998秒内在一共传输了3.7365e+07  bytes。每个进程的传输数据量的大小为37365bytes.每秒有25.0001个请求和934129  bytes的数据。每一连接的响应时间为0.129849毫秒，最大响应时间为1.714毫秒，最小响应时间为0.047毫秒。第一次响应时间为 0.623193毫秒，最大的响应时间为4.695毫秒，最小的响应时候为0.37毫秒。响应页面的类型是200. 1000请求都为200！</code>
<code style="color: red;" mce_style="color: red;"  >IN[~]&gt;&gt;&gt;http_load -rate 5 -seconds 10 url.txt </code>
49 fetches, 1 max parallel, 1.83088e+06 bytes, in 10.0164 seconds
37365 mean bytes/connection
4.89197 fetches/sec, 182788 bytes/sec
msecs/connect: 0.226449 mean, 0.706 max, 0.179 min
msecs/first-response: 0.233184 mean, 0.786 max, 0.194 min
HTTP response codes:
code 200   49
<code style="color: red;" mce_style="color: red;"  >IN[~]&gt;&gt;&gt;http_load -rate 5 -seconds 10 urls.txt </code>
49 fetches, 1 max parallel, 1.83088e+06 bytes, in 10.0106 seconds
37365 mean bytes/connection
4.8948 fetches/sec, 182894 bytes/sec
msecs/connect: 0.332449 mean, 1.048 max, 0.274 min
msecs/first-response: 0.196571 mean, 0.305 max, 0.167 min
HTTP response codes:
code 200   49
</code>

而url.txt和urls.txt的内容分别是

<b>url.txt (nginx)</b><code style="color: green;" mce_style="color: green;"  >
http://localhost:8080/
</code>

<b>urls.txt (lighttpd)</b><code style="color: green;" mce_style="color: green;"  >
http://localhost/</code>

它们的配置文件如下：
<h4 style="color: red;" mce_style="color: red;"  ><b>lighttpd1.5</b></h4>
<code style="color: green;" mce_style="color: green;"  > server.modules              = (
"mod_access","mod_accesslog" )
server.document-root        = "/data/"
server.errorlog             = "/var/log/lighttpd.error.log"
index-file.names            = ( "index.php", "index.html")

server.pid-file                         = "/var/run/lighttpd.pid"
server.tag                                      = "Lighttpd"
server.username                         = "www"
server.groupname                        = "www"
# mimetype mapping
mimetype.assign             = (
,
".gif"          =&gt;      "image/gif",
".jpg"          =&gt;      "image/jpeg",
".jpeg"         =&gt;      "image/jpeg",
".png"          =&gt;      "image/png",
".css"          =&gt;      "text/css",
".html"         =&gt;      "text/html",
".htm"          =&gt;      "text/html",
".js"           =&gt;      "text/javascript",
".dtd"          =&gt;      "text/xml",
".xml"          =&gt;      "text/xml"
)
accesslog.filename          = "/var/log/lighttpd.access.log"
static-file.exclude-extensions = ( ".php", ".pl", ".fcgi" )
</code>
<h4 style="color: red;" mce_style="color: red;"  ><b>nginx0.8.49</b></h4>
<code style="color: green;" mce_style="color: green;"  >user  www www;
worker_processes  1;
error_log  /var/log/nginx.error.log info;
events {
worker_connections  1024;
}
http {
include       mime.types;
default_type  application/octet-stream;

log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
'$status $body_bytes_sent "$http_referer" '
'"$http_user_agent" "$http_x_forwarded_for"';
access_log  /var/log/nginx.access.log  main;
sendfile        on;
keepalive_timeout  65;
server {
listen       8080;
server_name  localhost;
location / {
root   /data;
index  index.html index.htm;
}
error_page   500 502 503 504  /50x.html;
location = /50x.html {
root   /usr/local/www/nginx-dist;
}
}
}</code>

从这里可以简单的看到，nginx的性能比lighttpd真的好一点，不过我发现了几个nginx不足的地方：

1 <b>日志文件过于简单.</b>我刚配置的时候，nginx无法支持php,我查看错误日志，错误日志只显示<font color="#ff0000"  >1051 directory index of "/data/blog/" is forbidden</font>这个信息，并没指出错误所在，这一点就不够lighttpd了。其实nginx的错误日志有几种格式，我试过几个都不行！

2 <b>启动后内存有点大。</b>启动后nginx所占的内存比lighttpd大了快一倍。我想应该是nginx在启动后就加载了所有的模块，而lighttpd对模块的加载是可选的

上面只是我刚开始玩nginx的片面之谈。其实nginx有很多lighttpd无法比拟的地方。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>37</wp:post_id>
		<wp:post_date>2011-01-25 09:58:40</wp:post_date>
		<wp:post_date_gmt>2011-01-25 01:58:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lighttpd%e4%b8%8enginx%e7%9a%84%e6%80%a7%e8%83%bd%e6%af%94%e8%be%83</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324830396]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_a46f9a2c9218e54500a540f0fb9ad271</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_1d0b44b5c6e147ceb32a582c32b4af5d</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_76e853462c7b3fd359bce362f876448d</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_b8a54cc9863e6e4eb90d106b8468f554</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_e66e1072871b8f30fc2ed89743082fa5</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_f9e83dd4a95b410a49681ed34d2bfd10</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>[转载]Vim 的 XML 文档编辑插件——xml.vim</title>
		<link>http://mgtuiw.blogcn.com/archives/36</link>
		<pubDate>Tue, 01 Mar 2011 15:13:42 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[css]]></category>

		<category domain="category" nicename="css"><![CDATA[css]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/70991953201121111342257</guid>
		<description></description>
		<content:encoded><![CDATA[原文来自于 http://lyanry.is-programmer.com/posts/492.html
<div id="article_body">
<div id="article_content">

Vim 有一个用于编辑 XML 文档的插件 xml.vim 非常好用，下载地址是：
<blockquote><a rel="nofollow" href="http://www.vim.org/scripts/script.php?script_id=1397" target="_blank">http://www.vim.org/scripts/script.php?script_id=1397</a></blockquote>
这 个插件的安装很简单，将下载的 xml.vim 文件复制到 ~/.vim/ftplugin 目录下，并在该目录下分别建立连接   docbk.vim、xsl.vim、html.vim、xhtml.vim，让它们皆指向 xml.vim。然后重新启动 vim 即可。

如果你使用的是 gvim，且所编辑的文档的扩展名是 ".xml"，那么菜单栏会有一个 “xml” 菜单，对那些不愿意输入命令的用户可能会有用。

下面介绍一下 xml.vim 的几个常用功能。
<h4>标记的自动闭合</h4>
输入前一半标记，会自动添加后一半标记，并把光标放置在标记中间。

譬如，输入：
<div>
<div>&lt;para&gt;</div>
</div>
vim.xml 会将其闭合为：
<div>
<div>&lt;para&gt;|&lt;/para&gt;</div>
</div>
注：上面代码中出现的 “|” 符号，这里用来表示 vim 中的插入光标。
<h4>标记换行＋闭合</h4>
在输入标记的前一半后，再输入一个 <code>&gt;</code> 符号，会进行换行：标记的前半部分与后半部分各占一行；标记行的中间有一空行，显示插入光标。

譬如，输入：
<div>
<div>&lt;para&gt;&gt;</div>
</div>
xml.vim 会将其处理为：
<div>
<div>&lt;para&gt;
|
&lt;/para&gt;</div>
</div>
<h4>标记的快速输入</h4>
直接输入标记名后面跟随两个分号，即可实现标记的换行＋闭合。

譬如，输入：
<div>
<div>para;;</div>
</div>
可以得到：
<div>
<div>&lt;para&gt;
|
&lt;/para&gt;</div>
</div>
<h4>快速修改标记名</h4>
将光标移动到要修改的标记上，在 normal 模式下输入 <code>\c</code> ，这时：如果你用的是 gvim，就会跳出一个对话框，在其文本框中输入新的标记名即可；如果你是在终端中使用 vim，只需要 vim 下面的命令窗口中输入新的标记名即可。
<h4>在标记上跳跃</h4>
将光标移动到某一标记名上，然后在 normal 模式下摁 <code>%</code> 键，光标就可以在标记的前半部分与后半部分来回跳转。如果当前光标是在标记的括号上，那么它就像 vim 往常那样，在括号的前半部分与后半部分来回跳跃了。
<h4>更详细地用法</h4>
xml.vim 的详细用法请参考其说明文档，在 vim 的 normal 模式下，输入：
<div>
<div>:h xml-plugin</div>
</div>
即可打开说明文档。

</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>36</wp:post_id>
		<wp:post_date>2011-03-01 23:13:42</wp:post_date>
		<wp:post_date_gmt>2011-03-01 15:13:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e8%bd%ac%e8%bd%bdvim-%e7%9a%84-xml-%e6%96%87%e6%a1%a3%e7%bc%96%e8%be%91%e6%8f%92%e4%bb%b6%e2%80%94%e2%80%94xml-vim</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324830343]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>css reset前后的不同</title>
		<link>http://mgtuiw.blogcn.com/archives/35</link>
		<pubDate>Thu, 24 Mar 2011 10:19:02 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[css]]></category>

		<category domain="category" nicename="css"><![CDATA[css]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/7099195320112246192157</guid>
		<description></description>
		<content:encoded><![CDATA[先来两段css:

第一段
&lt;style type="text/css"&gt;
<strong> body{ margin:0; padding:0; }</strong>
#header{ width:100%; background-color:#222222; padding:30px 0; }
.content{ margin:0 auto; width:746px; }
.content ul{ list-style:none; }
.content ul li{ float:left; display:black; padding:0 10px; }
.content ul li a{ color:#FFF; }
&lt;/style&gt;
&lt;div id="header"&gt;
&lt;ul style="list-style:none; "&gt;
&lt;li style="float:left;"&gt;&lt;a href="http://mgtuiw.blog.163.com/blog/#"&gt;a&lt;/a&gt;&lt;/li&gt;
&lt;li style="float:left;"&gt;&lt;a href="http://mgtuiw.blog.163.com/blog/#"&gt;b&lt;/a&gt;&lt;/li&gt;
&lt;li style="float:left;"&gt;&lt;a href="http://mgtuiw.blog.163.com/blog/#"&gt;c&lt;/a&gt;&lt;/li&gt;
&lt;li style="float:left;"&gt;&lt;a href="http://mgtuiw.blog.163.com/blog/#"&gt;d&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

第二段
&lt;style type="text/css"&gt;
<strong> body,ul,li{ margin:0; padding:0; }</strong>
#header{ width:100%; background-color:#222222; padding:30px 0; }
.content{ margin:0 auto; width:746px; }
.content ul{ list-style:none; }
.content ul li{ float:left; display:black; padding:0 10px; }
.content ul li a{ color:#FFF; }
&lt;/style&gt;
&lt;div id="header"&gt;
&lt;ul style="list-style:none; "&gt;
&lt;li style="float:left;"&gt;&lt;a href="http://mgtuiw.blog.163.com/blog/#"&gt;a&lt;/a&gt;&lt;/li&gt;
&lt;li style="float:left;"&gt;&lt;a href="http://mgtuiw.blog.163.com/blog/#"&gt;b&lt;/a&gt;&lt;/li&gt;
&lt;li style="float:left;"&gt;&lt;a href="http://mgtuiw.blog.163.com/blog/#"&gt;c&lt;/a&gt;&lt;/li&gt;
&lt;li style="float:left;"&gt;&lt;a href="http://mgtuiw.blog.163.com/blog/#"&gt;d&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

它们分别得到的 <strong>header</strong> 的高度是 <strong>76px</strong> 和 <strong>60px</strong> .而不同的地方是上面的红色部分。这也是reset前和reset后的差别。reset前字体px为16px, 但reset后的字体px居然为0，但也是我想要的结果.

个人认为reset后的css是易于控制的。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>35</wp:post_id>
		<wp:post_date>2011-03-24 18:19:02</wp:post_date>
		<wp:post_date_gmt>2011-03-24 10:19:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>css-reset%e5%89%8d%e5%90%8e%e7%9a%84%e4%b8%8d%e5%90%8c</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324830257]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>shell统计访问日志的IP并排序(很笨的方法)</title>
		<link>http://mgtuiw.blogcn.com/archives/33</link>
		<pubDate>Wed, 27 Apr 2011 07:17:11 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[shell]]></category>

		<category domain="category" nicename="shell"><![CDATA[shell]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/70991953201132731711872</guid>
		<description></description>
		<content:encoded><![CDATA[1.<font color="#008000"  >grep "[1-9]\{1,3\}\.[1-9]\{1,3\}\.[1-9]\{1,3\}\.[1-9]\{1,3\}" nginx.access.log | awk '{ print $1 }' | sort | uniq -c | sort -r | head -n 2<br /></font> 2.只针对nginx的log格式为$remote_addr - $remote_user [$time_local] "$request“ $status $body_bytes_sent "$http_referer""$http_user_agent" "$http_x_forwarded_for"的排序 <br /><font color="#008000"  >cut -d \ -f 1 nginx.access.log | awk '{ print $1 }' | sort | uniq -c | sort -r | head -n 2<br /></font> 不过如果是这样可以修改-d 和-f 去工作]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>33</wp:post_id>
		<wp:post_date>2011-04-27 15:17:11</wp:post_date>
		<wp:post_date_gmt>2011-04-27 07:17:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>shell%e7%bb%9f%e8%ae%a1%e8%ae%bf%e9%97%ae%e6%97%a5%e5%bf%97%e7%9a%84ip%e5%b9%b6%e6%8e%92%e5%ba%8f%e5%be%88%e7%ac%a8%e7%9a%84%e6%96%b9%e6%b3%95</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324830028]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>对Active Record的一点理解</title>
		<link>http://mgtuiw.blogcn.com/archives/32</link>
		<pubDate>Thu, 28 Apr 2011 07:10:31 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[rails]]></category>

		<category domain="category" nicename="rails"><![CDATA[rails]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/70991953201132815430913</guid>
		<description></description>
		<content:encoded><![CDATA[<div-->正在学习rails，在写一个东西练一下手，这东西有一点是要对数据库进行排序，由于对mysql不理解，昨天看了mysql的中文手册，今天刚好搞了一下，终于我懂了一点点了。

<code>@abc = Talk.find(:all, :order =&gt; "id desc") </code>;的相对应的SQL语句是
<code>SELECT `talks`.* FROM `talks` ORDER BY id desc;</code>
对talks表的id进行查询并倒序输出。

<code>@abc = Talk.find(3)</code>相对应的SQL语句是
<code>select `talks`.* from `talks` where (id = 3);</code>

<code>@abc = Talk.find 1,3,5,7,9 </code>相对应的SQL语句是
<code>select `talks`.* from `talks` where (id in (1,3,5,7,9));</code>

<code>@abc = Talk.find( :all, :conditions =&gt; { :first_name =&gt; @first_name,
:last_name =&gt; @last_name,
:favorite_band_id =&gt; nil }</code>
相对应的SQL语句是
<code>select `talks`.* from `talks` where first_nam = XXX and last_name = XXX and favorite_band_id is null;</code>

按上面所说，

<pre>:order            order by -- 对结果进行排序
:select           select
:group            group by -- 对结果进行分组
:join             join
:from             from
:readonly         readeronly
:lock             lock</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>32</wp:post_id>
		<wp:post_date>2011-04-28 15:10:31</wp:post_date>
		<wp:post_date_gmt>2011-04-28 07:10:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%af%b9active-record%e7%9a%84%e4%b8%80%e7%82%b9%e7%90%86%e8%a7%a3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324829988]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>git与github</title>
		<link>http://mgtuiw.blogcn.com/archives/31</link>
		<pubDate>Thu, 28 Apr 2011 11:03:02 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[git]]></category>

		<category domain="category" nicename="git"><![CDATA[git]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/70991953201132863752791</guid>
		<description></description>
		<content:encoded><![CDATA[今天成功地将自己的一个项目存到了githut上面了。下面是过程github的提示过程做的：
<h2>Global setup:</h2>
<pre> Download and install <a rel="nofollow" href="http://git-scm.com/download" target="_blank">Git</a>
git config --global user.name "minix"
git config --global user.email mgtuiw@gmail.com</pre>
<h2>Next steps:</h2>
<pre>mkdir Shop
cd Shop
git init
touch README
<span style="color: #ff0000;">git add .</span>     //这一步很重要！意思是就增加当前目前下的所有文件到远程上面去！
git commit -m 'first commit'
git remote add origin git@github.com:minix/Shop.git
git push -u origin master</pre>
<h2>Existing Git Repo?</h2>
<pre>cd existing_git_repo
git remote add origin git@github.com:minix/Shop.git
git push -u origin master 

最让我不知所措的是
SSH Public Keys
这一步。这一步在里看到了一个过程http://glovely.info/2011/01/webmeeting1-2/</pre>
<em>2)配置ssh-key</em>

<em>Git是使用ssh tunnel(加密通道，不做介绍了)。因此要先产生一枚ssh-key 上传到Github上。</em>

<em>$ ssh-keygen -C ‘your@email.address’ -t rsa</em>

<em>然后确认默认路径，再连续输入2次密码(直接回车则密码为空)即可。</em>

这样会在生成两个文件，分别是公钥(id_rsa.pub)和私钥(id_rsa)。只要将公钥里面的内容复制到“SSH Public Keys"选项里面即可。

<span style="font-size: medium;">更新git</span>

git  init

git add [file]    //这里是要更新的文件

git commit -m ” 你更新了什么”

git branch new_branch     //创建一个新的分支

git remote update   //更新当前的分支

git push origin new_branch  //增加文件到新的分支下面]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>31</wp:post_id>
		<wp:post_date>2011-04-28 19:03:02</wp:post_date>
		<wp:post_date_gmt>2011-04-28 11:03:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>git%e4%b8%8egithub</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324829653]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>[转贴]web性能优化</title>
		<link>http://mgtuiw.blogcn.com/archives/30</link>
		<pubDate>Mon, 30 May 2011 03:33:05 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[web]]></category>

		<category domain="category" nicename="web"><![CDATA[web]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/7099195320114301133534</guid>
		<description></description>
		<content:encoded><![CDATA[<strong><span style="font-size: medium;">web性能优化（一）弱请求处理</span></strong>

[文章作者：狂奔的鹿(陆松林) 本文版本：v1.0  转载请注明原文链接：<a rel="nofollow" href="http://www.cnblogs.com/dynamiclu/">http://www.cnblogs.com/dynamiclu/</a>]

从开发人员到系统工程师、运维工程师以及架构师,经常会收到用户或需求方的反映,说我们网站打开地很慢，甚至出现了502等。这个问题原因较多，处理方式也较多。我要分享的是一个弱请求处理的优化方式。

弱请求在这里是指那些响应较慢、耗时较长的HTTP请求,是笔者临时命名的。有经验的工程师都知道，我们要分析系统性能问题时，只需分析这个系统的请求处   理容量和单个请求的平均响应时间。有前辈分享的2/8原则，提到我们的系统有20%左右响应较慢的请求占用了超过20%以上的资源。这里要说的就是对这些  请求响应时间的处理方式。

如何获取系统的单个请求响应时间？

　　客户端层面情况较复杂，存在很大的地域差别，可以用httpwatch或者压力测试软件进行区别，也可以依靠部署在全国各地的性能监控平台获取信息。

服务器端的方式有：1.配置nginx,apache日志格式  2.在工程代码里加filter，进行记录。<strong>建议</strong>使用第一种方式。
<pre>
　修改nginx配置文件
　　vi /usr/local/nginx/conf/nginx.conf
　　找到log_format，在最后添加request_time项，如下
<span style="color: #ff6600;"><em>　　log_format main '$remote_addr - $remote_user [$time_local] '
　　'"$request" $status $bytes_sent '
　　'"$http_referer" "$http_user_agent" '
　　'"$gzip_ratio"'
　　'"$request_time"'; </em></span>
保存退出.  

<pre>kill -HUP PID(nginx的PID)</pre>

<strong>提醒：</strong>日志格式修改后，注意是否有相关的日志分析程序需要进行相应地修改。

打开的nginx时志文件
<pre>
  tail -fn100 /usr/local/nginx/logs/access.log
</pre>
此时发现在最后部分多了一项数据，如下图：

<img title="[转贴]web性能优化（一）弱请求处理 - mgtuiw - " src="http://pic002.cnblogs.com/images/2011/260553/2011050811041793.jpg" alt="[转贴]web性能优化（一）弱请求处理 - mgtuiw - " />

红圈表示请求/msg/replyList/msg/1/1.html的响应时间为0.053秒

太好了，服务器请求时间记录下来了。

apache也可以作类似设置，有兴趣的朋友可以在google里搜索一下就知道了。

然后，让我们的系统跑动若干时间段。

我们再取出日志，执行：
<pre>
 cat access.log |awk  '($7~/\.html/){print $NF " " $1 " " $4 " " $7}'|sort -nr|head -100
#意思是列出到客户端最耗时的前100个请求的html页面, （可修改，为jsp,php）分别显示响应时间  IP来源  请求发生的时间   请求页</div></pre>
</div>
如下图
<img title="[转贴]web性能优化（一）弱请求处理 - mgtuiw - " src="http://pic002.cnblogs.com/images/2011/260553/2011050811190188.jpg" alt="[转贴]web性能优化（一）弱请求处理 - mgtuiw - " />

说明请求/msg/msgup.html较慢，超过了6秒，太消耗资源了。

经常分析日志，我们会得到一系列这样的请求页面。

找到了妨碍我们系统性能打开较慢的问题页面，根据前辈提到的2/8原则，我们可以对这些请求进行处理：

<strong> 方法一：</strong>

分析这个请求对应的程序是不是有很多for循环，是不是直接读库，缓存策略是否还可以优化等等修改程序就OK。

<strong>方法二：</strong>

利用nginx的正?则匹配转发，我们把这些弱请求统计转到其它服务器处理，起到分流的作用。

实施上述策略之后，我们发现系统负载减轻了，502更少了，页面打开的速度更快了。
<h1><span style="color: #000000; font-size: small;">web性能优化（二）优化思维图</span></h1>
<div id="cnblogs_post_body">

[文章作者：狂奔的鹿(陆松林) 本文版本：v1.0  转载请注明原文链接：<a rel="nofollow" href="http://www.cnblogs.com/dynamiclu/">http://www.cnblogs.com/dynamiclu/</a>]

如下图所示, 是之前在实际工作中总结出来, 画成了一张图

<img title="[转贴]web性能优化 - mgtuiw - " src="http://pic002.cnblogs.com/images/2011/260553/2011050812163265.gif" alt="[转贴]web性能优化 - mgtuiw - " />

</div>
<strong><span style="font-size: medium;">web性能优化（三）反爬虫策略</span></strong>

反爬虫策略，表面上看似乎跟WEB系统优化没有关系，经过分析，发现该策略是可以归到WEB性能优化的系列之中。

通过分析apache日志发现，某系统40%的带宽和服务器资源都消耗在爬虫上，如果除去10%-15%搜索引擎的爬虫，做好反爬虫策略，能节省20%-25%的资源，其实是变向优化了web系统。

<span style="font-size: small;"><strong>一、爬虫请求与正常用户请求的区别</strong></span>

爬虫请求是类似httpClient的机制或curl，wget的命令，用户请求一般走浏览器。

区别：爬虫请求一般不会执行页面里的异步JavaScript操作，而用户请求则执行Jquery提供的异步JavaScript操作，具体如下：
<pre>
<span style="color: #ff6600;"><em>&lt;script type="text/javascript"&gt;
$(document).ready(function(){
        alertFunTest();
}
function alertFunTest() {
    alert(“异步”);
}
&lt;/script &gt;</em></span></pre>
代码alert（“异步”）一般不会被爬虫请求执行。

<strong>二、分析系统有多少爬虫行为</strong>

　　某系统某天的日志分析如下：
<pre>
cat access20110421.log | wc -l
2156293

cat  page_access20110421.log | sort | uniq -c | sort -nr | head -n20
 441421 /读帖页          20.4%
 374274 /弹出框          17.3%
 266984 /帖子点击数        12.3%
 213522 /读取支持数和反支持数        9.9%
 207269 /其它                 9.6%
 203567 /帖子列表页        9.4%
 185138 /刷新功能           8.5%
 164884 /帖子列表点击      7.6%</pre>
如上所示，帖子点击数请求是不会被爬虫执行的。

（读帖页数-帖子点击数）/ 读帖页数=爬虫执行读帖页次数的比例

（441421 - 266984 ）/ 441421=39.6%

结论：近40% 帖子的读取操作是爬虫行为，读帖占系统85%以上的操作，也就是说近1/3以上的网络和服务器资源在为爬虫服务。

三、<strong>请求在不同层面对应的反抓策略</strong>

<strong>（一）防火墙层面</strong>

通过netstat80端口的tcp连接量判断IP是否非法。

WEB系统都是走http协议跟WEB容器连通的，每次请求至少会产生一次客户端与服务器的tcp连接。通过netstat命令，就可以查看到当前同时连接服务器所对应的IP以及连接量。

命令  /bin/netstat -nat -n | grep 80   一般都几百或几千个。

同一个IP对应的连接数超过我们观察到的一个阀值时，就可判断为非正常的用户请求。阀值设定至关重要，大型网吧或同一个学校、公司出来的IP也可能会被误判为非法请求。

此策略我写了两个定时脚本去，一个定时封IP( tcpForbidCmd.sh )，一个定时释放IP ( tcpReleaseCmd.sh )，分别是每隔5分钟和40分钟各执行一次

tcpForbidCmd.sh参考代码如下：
<pre>
<span style="color: #ff6600;">#!/bin/sh
file=/home/songlin.lu/shell/log/forbid-ips-tmp.log
myIps=/home/songlin.lu/shell/log/noforbid_ips.log
today=`date +'%Y%m%d'`
logForbidIp=/home/songlin.lu/shell/log/forbid-iptables-logs-$today.log
netstatFile=/home/songlin.lu/shell/log/forbid-netstat-nat-tmp.log
/bin/netstat -nat -n &gt; $netstatFile
nowDate=`date +'%Y-%m-%d %H:%M'`
/bin/awk -F: '/tcp/{a[$(NF-1)]++}END{for(i in a)if(a[i]&gt;90)print i}' $netstatFile &gt; $file
drop_ip=`cat $file |awk '{print $2}'`
for iptables_ip in $drop_ip
 do
  if [ $iptables_ip != $0 ] &amp;&amp; [ -z "` iptables -L -n | grep DROP | awk '{print$4}'|grep $iptables_ip`" ] &amp;&amp; [ -z "` cat $myIps |grep $iptables_ip`"];then
   /sbin/iptables -A INPUT -s $iptables_ip -p tcp --dport 80 -j DROP
   echo $iptables_ip &gt;&gt; /home/songlin.lu/shell/log/release-forbid-logs-tmp.log
   echo '--------------------'$nowDate'----'$iptables_ip &gt;&gt; $logForbidIp
  fi
 done</span></pre>
文件/home/songlin.lu/shell/log/noforbid_ips.log为白名单列表

tcpReleaseCmd.sh参考代码如下：
<pre>
#!/bin/sh
today=`date +'%Y%m%d'`
logReleaseIpLog=/home/songlin.lu/shell/log/release-iptables-log-$today.log
iptables=/home/songlin.lu/shell/log/release-iptables-save-tmp.log
tmpFile=/home/songlin.lu/shell/log/release-forbid-logs-tmp.log
/sbin/iptables-save &gt; $iptables
drop_ips=`cat $tmpFile`
nowDate=`date +'%Y-%m-%d %H:%M'`
for iptables_ip1 in $drop_ips
 do
  if [ ! -z "`cat $iptables |awk /DROP/'{print $4}' | grep $iptables_ip1`" ]
  then
   /sbin/iptables -D INPUT -s $iptables_ip1 -p tcp --dport 80 -j DROP
   echo '--------------------'$nowDate'----'$iptables_ip1 &gt;&gt; $logReleaseIpLog
  fi
 done
&gt; $tmpFile</pre>

此策略相当于给我们的系统设定了门槛，类似公路交通系统内，某马路设定限高4米栏杆，高于4米的车不能在此通行。该策略能预防恶意的或新手写的请求频率不规则的爬虫。

<strong>（二）WEB服务器容器层面</strong>

a.User-Agent判断      b. connlimit模块判断

每个爬虫会声明自己的User-Agent信息，我们可以通过判断爬虫的User-Agent信息来识别，具体查看相关文档

Apache作connlimit需要mod_limitipconn来实现，一般需要手动编译。

　 编辑httpd.conf文件，添加如下配置
<pre>ExtendedStatus On

LoadModule limitipconn_module modules/mod_limitipconn.so

&lt; IfModule mod_limitipconn.c &gt;

   &lt; Location / &gt;   # 所有虚拟主机的/目录

        　　MaxConnPerIP  20     # 每IP只允许20个并发连接

　　        NoIPLimit image/*  # 对图片不做IP限制

    &lt; /Location&gt;　　

&lt; /IfModule&gt;</pre>
Nginx作connlimit，限制ip并发数，比较简单

添加limit_conn  这个变量可以在http, server, location使用  如：limit_conn   one  10;

<strong>（三）日志层面</strong>

　　通过日志和网站流量分析识别爬虫

用 awstats分析服务器日志，用流量统计工具，如Google   Analytics来统计IP对应的流量记录，流量统计在网页里面嵌入一段js代码。把统计结果和流量统计系统记录的IP地址进行对比，排除真实用户访问  IP，再排除我们希望放行的网页爬虫，比如Google，百度，youdao爬虫等。最后的分析结果就得到爬虫的IP地址。

<strong>（四）程序层面</strong>

时时反爬虫过滤机制

实现起来也比较简单，我们可以用memcached或本地内存来做访问计数器，在缓存过期之前的时间段内（如3分钟），每个IP访问一次，计数器加1，缓  存的KEY包括IP，通过计数器得到的值，判断超过一个阀值，这个IP很可能有问题，那么就可以返回一个验证码页面，要求用户填写验证码。如果是爬虫的  话，当然不可能填写验证码，就被拒掉了，保护了后端的资源。

阀值的设定也是很重要的，不同的系统不一样。

我们将这个过滤机制改进一下，将更加准确。   即我们在网页的最下面添加一个JS的异步请求，此异步请求用来减计数器的值，进页面时对IP进行加值，出页面时减值，生成一个差值。   根据我们之前的分析，爬虫不会执行异步JS减值请求。 这样可以从生成的值的大小上判断这个IP是否为爬虫。

程序逻辑如下图所示:

<img title="[转贴]web性能优化 - mgtuiw - " src="http://pic002.cnblogs.com/images/2011/260553/2011051511372582.gif" alt="[转贴]web性能优化 - mgtuiw - " />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>30</wp:post_id>
		<wp:post_date>2011-05-30 11:33:05</wp:post_date>
		<wp:post_date_gmt>2011-05-30 03:33:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e8%bd%ac%e8%b4%b4web%e6%80%a7%e8%83%bd%e4%bc%98%e5%8c%96</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324829524]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>css中中文字体的表现方法</title>
		<link>http://mgtuiw.blogcn.com/archives/29</link>
		<pubDate>Tue, 31 May 2011 03:41:22 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[css]]></category>

		<category domain="category" nicename="css"><![CDATA[css]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/709919532011431114122796</guid>
		<description></description>
		<content:encoded><![CDATA[<table><thead><tr><th>中文名</th> <th>英文名</th> <th>Unicode</th> </tr> <tr> <th colspan="4"  >Mac OS</th> </tr> </thead> <tbody> <tr> <td>华文细黑</td> <td>STHeiti Light [STXihei]</td> <td>\534E\6587\7EC6\9ED1</td> </tr> <tr> <td>华文黑体</td> <td>STHeiti</td> <td>\534E\6587\9ED1\4F53</td> </tr> <tr> <td>华文楷体</td> <td>STKaiti</td> <td>\534E\6587\6977\4F53</td> </tr> <tr> <td>华文宋体</td> <td>STSong</td> <td>\534E\6587\5B8B\4F53</td> </tr> <tr> <td>华文仿宋</td> <td>STFangsong</td> <td>\534E\6587\4EFF\5B8B</td> </tr> <tr> <td>丽黑 Pro</td> <td>LiHei Pro Medium</td> <td>\4E3D\9ED1 Pro</td> </tr> <tr> <td>丽宋 Pro</td> <td>LiSong Pro Light</td> <td>\4E3D\5B8B Pro</td> </tr> <tr> <td>标楷体</td> <td>BiauKai</td> <td>\6807\6977\4F53</td> </tr> <tr> <td>苹果丽中黑</td> <td>Apple LiGothic Medium</td> <td>\82F9\679C\4E3D\4E2D\9ED1</td> </tr> <tr> <td>苹果丽细宋</td> <td>Apple LiSung Light</td> <td>\82F9\679C\4E3D\7EC6\5B8B</td> </tr>  <thead> <tr> <th colspan="4"  >Windows</th> </tr> </thead> <tbody> <tr> <td>新细明体</td> <td>PMingLiU</td> <td>\65B0\7EC6\660E\4F53</td> </tr> <tr> <td>细明体</td> <td>MingLiU</td> <td>\7EC6\660E\4F53</td> </tr> <tr> <td>标楷体</td> <td>DFKai-SB</td> <td>\6807\6977\4F53</td> </tr> <tr> <td>黑体</td> <td>SimHei</td> <td>\9ED1\4F53</td> </tr> <tr> <td>宋体</td> <td>SimSun</td> <td>\5B8B\4F53</td> </tr> <tr> <td>新宋体</td> <td>NSimSun</td> <td>\65B0\5B8B\4F53</td> </tr> <tr> <td>仿宋</td> <td>FangSong</td> <td>\4EFF\5B8B</td> </tr> <tr> <td>楷体</td> <td>KaiTi</td> <td>\6977\4F53</td> </tr> <tr> <td>仿宋_GB2312</td> <td>FangSong_GB2312</td> <td>\4EFF\5B8B_GB2312</td> </tr> <tr> <td>楷体_GB2312</td> <td>KaiTi_GB2312</td> <td>\6977\4F53_GB2312</td> </tr> <tr> <td>微软正黑体</td> <td>Microsoft JhengHei</td> <td>\5FAE\x8F6F\6B63\9ED1\4F53</td> </tr> <tr> <td>微软雅黑</td> <td>Microsoft YaHei</td> <td>\5FAE\8F6F\96C5\9ED1</td> </tr>  <thead> <tr> <th colspan="4"  >Office</th> </tr> </thead> <tbody> <tr> <td>隶书</td> <td>LiSu</td> <td>\96B6\4E66</td> </tr> <tr> <td>幼圆</td> <td>YouYuan</td> <td>\5E7C\5706</td> </tr> <tr> <td>华文细黑</td> <td>STXihei</td> <td>\534E\6587\7EC6\9ED1</td> </tr> <tr> <td>华文楷体</td> <td>STKaiti</td> <td>\534E\6587\6977\4F53</td> </tr> <tr> <td>华文宋体</td> <td>STSong</td> <td>\534E\6587\5B8B\4F53</td> </tr> <tr> <td>华文中宋</td> <td>STZhongsong</td> <td>\534E\6587\4E2D\5B8B</td> </tr> <tr> <td>华文仿宋</td> <td>STFangsong</td> <td>\534E\6587\4EFF\5B8B</td> </tr> <tr> <td>方正舒体</td> <td>FZShuTi</td> <td>\65B9\6B63\8212\4F53</td> </tr> <tr> <td>方正姚体</td> <td>FZYaoti</td> <td>\65B9\6B63\59DA\4F53</td> </tr> <tr> <td>华文彩云</td> <td>STCaiyun</td> <td>\534E\6587\5F69\4E91</td> </tr> <tr> <td>华文琥珀</td> <td>STHupo</td> <td>\534E\6587\7425\73C0</td> </tr> <tr> <td>华文隶书</td> <td>STLiti</td> <td>\534E\6587\96B6\4E66</td> </tr> <tr> <td>华文行楷</td> <td>STXingkai</td> <td>\534E\6587\884C\6977</td> </tr> <tr> <td>华文新魏</td> <td>STXinwei</td> <td>\534E\6587\65B0\9B4F<br /></td></tr></table> <br />最好是使用<font color="#ff6600"  ><b>Unicode</b></font>的方法在CSS中对中文字体表现。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>29</wp:post_id>
		<wp:post_date>2011-05-31 11:41:22</wp:post_date>
		<wp:post_date_gmt>2011-05-31 03:41:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>css%e4%b8%ad%e4%b8%ad%e6%96%87%e5%ad%97%e4%bd%93%e7%9a%84%e8%a1%a8%e7%8e%b0%e6%96%b9%e6%b3%95</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324829112]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>[转载]nginx 的 tcp_nopush 和 tcp_nodelay</title>
		<link>http://mgtuiw.blogcn.com/archives/28</link>
		<pubDate>Tue, 14 Jun 2011 12:11:44 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[system]]></category>

		<category domain="category" nicename="system"><![CDATA[system]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/709919532011514811443</guid>
		<description></description>
		<content:encoded><![CDATA[以下内容都来自于 http://www.oschina.net/question/17_2516?sort=time ，现抄下来作以后的复习用途。<br /><div id="entry-content-single"  > <p>TCP_NODELAY 和 TCP_CORK，<br />这两个选项都对网络连接的行为具有重要的作用。许多UNIX系统都实现了 TCP_NODELAY选项，但是，TCP_CORK则是Linux系统所独有的  而且相对较新；它首先在内核版本2.4上得以实现。此外，其他UNIX系统版本也有功能类似的选项，值得注意的是，在某种由BSD派生的系统上的  TCP_NOPUSH选项其实就是TCP_CORK的一部分具体实现。<br />TCP_NODELAY和TCP_CORK基本上控制了包的“Nagle 化”，Nagle化在这里的含义是采用Nagle算法把较小的包组装为更大的帧。 John  Nagle是Nagle算法的发明人，后者就是用他的名字来命名的，他在1984年首次用这种方法来尝试解决福特汽车公司的网络拥塞问题（欲了解详情请参  看IETF RFC 896）。他解决的问题就是所谓的silly window syndrome  ，中文称“愚蠢窗口症候群”，具体含义是，因为普遍终端应用程序每产生一次击键操作就会发送一个包，而典型情况下一个包会拥有一个字节的数据载荷以及40  个字节长的包头，于是产生4000%的过载，很轻易地就能令网络发生拥塞,。  Nagle化后来成了一种标准并且立即在因特网上得以实现。它现在已经成为缺省配置了，但在我们看来，有些场合下把这一选项关掉也是合乎需要的。<br />现 在让我们假设某个应用程序发出了一个请求，希望发送小块数据。我们可以选择立即发送数据或者等待产生更多的数据然后再一次发送两种策略。如果我们马上发  送数据，那么交互性的以及客户/服务器型的应用程序将极大地受益。例如，当我们正在发送一个较短的请求并且等候较大的响应时，相关过载与传输的数据总量相   比就会比较低，而且，如果请求立即发出那么响应时间也会快一些。以上操作可以通过设置套接字的TCP_NODELAY选项来完成，这样就禁用了Nagle  算法。<br />另外一种情况则需要我们等到数据量达到最大时才通过网络一次发送全部数据，这种数据传输方式有益于大量数据的通信性能，典型的应用就是文 件服务器。应用  Nagle算法在这种情况下就会产生问题。但是，如果你正在发送大量数据，你可以设置TCP_CORK选项禁用Nagle化，其方式正好同  TCP_NODELAY相反（TCP_CORK 和 TCP_NODELAY 是互相排斥的）。下面就让我们仔细分析下其工作原理。<br />假设应用程序 使用sendfile()函数来转移大量数据。应用协议通常要求发送某些信息来预先解释数据，这些信息其实就是报头内容。典型情况下报头很  小，而且套接字上设置了TCP_NODELAY。有报头的包将被立即传输，在某些情况下（取决于内部的包计数器），因为这个包成功地被对方收到后需要请求  对方确认。这样，大量数据的传输就会被推迟而且产生了不必要的网络流量交换。<br />但是，如果我们在套接字上设置了TCP_CORK（可以比喻为在管 道上插入“塞子”）选项，具有报头的包就会填补大量的数据，所有的数据都根据大小自动地 通过包传输出去。当数据传输完成时，最好取消TCP_CORK  选项设置给连接“拔去塞子”以便任一部分的帧都能发送出去。这同“塞住”网络连接同等重要。<br />总而言之，如果你肯定能一起发送多个数据集合（例如HTTP响应的头和正文），那么我们建议你设置TCP_CORK选项，这样在这些数据之间不存在延迟。能极大地有益于WWW、FTP以及文件服务器的性能，同时也简化了你的工作。示例代码如下：</p> <p>intfd, on = 1;<br />…<br />/* 此处是创建套接字等操作，出于篇幅的考虑省略*/<br />…<br />setsockopt (fd, SOL_TCP, TCP_CORK, &on, sizeof (on)); /* cork */<br />write (fd, …);<br />fprintf (fd, …);<br />sendfile (fd, …);<br />write (fd, …);<br />sendfile (fd, …);<br />…<br />on = 0;<br />setsockopt (fd, SOL_TCP, TCP_CORK, &on, sizeof (on)); /* 拔去塞子 */</p> <p>不幸的是，许多常用的程序并没有考虑到以上问题。例如，Eric Allman编写的sendmail就没有对其套接字设置任何选项。</p> <p>Apache  HTTPD是因特网上最流行的Web服务器，它的所有套接字就都设置了TCP_NODELAY选项，而且其性能也深受大多数用户的满意。这是为什么呢？答  案就在于实现的差别之上。由BSD衍生的TCP/IP协议栈（值得注意的是FreeBSD）在这种状况下的操作就不同。当在TCP_NODELAY  模式下提交大量小数据块传输时，大量信息将按照一次write()函数调用发送一块数据的方式发送出去。然而，因为负责请求交付确认的记数器是面向字节而  非面向包（在Linux上）的，所以引入延迟的概率就降低了很多。结果仅仅和全部数据的大小有关系。而 Linux  在第一包到达之后就要求确认，FreeBSD则在进行如此操作之前会等待好几百个包。</p> <p>在Linux系统上，TCP_NODELAY的效果同习惯于BSD TCP/IP协议栈的开发者所期望的效果有很大不同，而且在Linux上的Apache性能表现也会更差些。其他在Linux上频繁采用TCP_NODELAY的应用程序也有同样的问题。</p> </div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>28</wp:post_id>
		<wp:post_date>2011-06-14 20:11:44</wp:post_date>
		<wp:post_date_gmt>2011-06-14 12:11:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e8%bd%ac%e8%bd%bdnginx-%e7%9a%84-tcp_nopush-%e5%92%8c-tcp_nodelay</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324829074]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>2011年06月24日</title>
		<link>http://mgtuiw.blogcn.com/archives/27</link>
		<pubDate>Fri, 24 Jun 2011 06:14:18 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[rails]]></category>

		<category domain="category" nicename="rails"><![CDATA[rails]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/70991953201152411534411</guid>
		<description></description>
		<content:encoded><![CDATA[<pre style="color:green;">/usr/local/lib/ruby/gems/1.9/gems/mongo-1.3.1/lib/mongo/util/support.rb:50:in `validate_db_name': db_name must be a string or symbol (TypeError)
        from /usr/local/lib/ruby/gems/1.9/gems/mongo-1.3.1/lib/mongo/db.rb:80:in `initialize'
        from /usr/local/lib/ruby/gems/1.9/gems/mongo-1.3.1/lib/mongo/connection.rb:298:in `new'
        from /usr/local/lib/ruby/gems/1.9/gems/mongo-1.3.1/lib/mongo/connection.rb:298:in `db'
        from /usr/local/lib/ruby/gems/1.9/gems/mongoid-2.0.0.rc.8/lib/mongoid/config/database.rb:19:in `configure'
        from /usr/local/lib/ruby/gems/1.9/gems/mongoid-2.0.0.rc.8/lib/mongoid/config.rb:325:in `configure_databases'
        from /usr/local/lib/ruby/gems/1.9/gems/mongoid-2.0.0.rc.8/lib/mongoid/config.rb:113:in `from_hash'
        from (eval):2:in `from_hash'
        from /usr/local/lib/ruby/gems/1.9/gems/mongoid-2.0.0.rc.8/lib/mongoid/railtie.rb:66:in `block in <class:Railtie>'
        from /usr/local/lib/ruby/gems/1.9/gems/railties-3.0.8/lib/rails/initiali  1 defaults: &defaults
zable.rb:25:in `instance_exec'
        from /usr/local/lib/ruby/gems/1.9/gems/railties-3.0.8/lib/rails/initializable.rb:25:in `run'
        from /usr/local/lib/ruby/gems/1.9/gems/railties-3.0.8/lib/rails/initializable.rb:50:in `block in run_initializers'
        from /usr/local/lib/ruby/gems/1.9/gems/railties-3.0.8/lib/rails/initializable.rb:49:in `each'
        from /usr/local/lib/ruby/gems/1.9/gems/railties-3.0.8/lib/rails/initializable.rb:49:in `run_initializers'
        from /usr/local/lib/ruby/gems/1.9/gems/railties-3.0.8/lib/rails/application.rb:134:in `initialize!'
        from /usr/local/lib/ruby/gems/1.9/gems/railties-3.0.8/lib/rails/application.rb:77:in `method_missing'
        from /data/pro/config/environment.rb:5:in `<top (required)>'
        from /usr/local/lib/ruby/gems/1.9/gems/activesupport-3.0.8/lib/active_support/dependencies.rb:239:in `require'
        from /usr/local/lib/ruby/gems/1.9/gems/activesupport-3.0.8/lib/active_support/dependencies.rb:239:in `block in require'
        from /usr/local/lib/ruby/gems/1.9/gems/activesupport-3.0.8/lib/active_support/dependencies.rb:225:in `block in load_dependency'
        from /usr/local/lib/ruby/gems/1.9/gems/activesupport-3.0.8/lib/active_support/dependencies.rb:596:in `new_constants_in'
        from /usr/local/lib/ruby/gems/1.9/gems/activesupport-3.0.8/lib/active_support/dependencies.rb:225:in `load_dependency'
        from /usr/local/lib/ruby/gems/1.9/gems/activesupport-3.0.8/lib/active_support/dependencies.rb:239:in `require'
        from /usr/local/lib/ruby/gems/1.9/gems/railties-3.0.8/lib/rails/application.rb:103:in `require_environment!'
        from /usr/local/lib/ruby/gems/1.9/gems/railties-3.0.8/lib/rails/commands.rb:16:in `<top (required)>'
        from script/rails:6:in `require'
        from script/rails:6:in `<main>'
IN[/data/pro]>>>rails g scaffold article name:string content:text
/usr/local/lib/ruby/1.9/psych.rb:148:in `parse': couldn't parse YAML at line 11 column 10 (Psych::SyntaxError)
        from /usr/local/lib/ruby/1.9/psych.rb:148:in `parse_stream'
        from /usr/local/lib/ruby/1.9/psych.rb:119:in `parse'
        from /usr/local/lib/ruby/1.9/psych.rb:106:in `load'
  1 require 'yaml'
        from /usr/local/lib/ruby/gems/1.9/gems/mongoid-2.0.0.rc.8/lib/mongoid/railtie.rb:65:in `block in <class:Railtie>'
        from /usr/local/lib/ruby/gems/1.9/gems/railties-3.0.8/lib/rails/initializable.rb:25:in `instance_exec'
        from /usr/local/lib/ruby/gems/1.9/gems/railties-3.0.8/lib/rails/initializable.rb:25:in `run'
        from /usr/local/lib/ruby/gems/1.9/gems/railties-3.0.8/lib/rails/initializable.rb:50:in `block in run_initializers'
        from /usr/local/lib/ruby/gems/1.9/gems/railties-3.0.8/lib/rails/initializable.rb:49:in `each'
        from /usr/local/lib/ruby/gems/1.9/gems/railties-3.0.8/lib/rails/initializable.rb:49:in `run_initializers'
        from /usr/local/lib/ruby/gems/1.9/gems/railties-3.0.8/lib/rails/application.rb:134:in `initialize!'
        from /usr/local/lib/ruby/gems/1.9/gems/railties-3.0.8/lib/rails/application.rb:77:in `method_missing'
        from /data/pro/config/environment.rb:5:in `<top (required)>'
        from /usr/local/lib/ruby/gems/1.9/gems/activesupport-3.0.8/lib/active_support/dependencies.rb:239:in `require'
        from /usr/local/lib/ruby/gems/1.9/gems/activesupport-3.0.8/lib/active_support/dependencies.rb:239:in `block in require'
        from /usr/local/lib/ruby/gems/1.9/gems/activesupport-3.0.8/lib/active_support/dependencies.rb:225:in `block in load_dependency'
        from /usr/local/lib/ruby/gems/1.9/gems/activesupport-3.0.8/lib/active_support/dependencies.rb:596:in `new_constants_in'
        from /usr/local/lib/ruby/gems/1.9/gems/activesupport-3.0.8/lib/active_support/dependencies.rb:225:in `load_dependency'
        from /usr/local/lib/ruby/gems/1.9/gems/activesupport-3.0.8/lib/active_support/dependencies.rb:239:in `require'
        from /usr/local/lib/ruby/gems/1.9/gems/railties-3.0.8/lib/rails/application.rb:103:in `require_environment!'
        from /usr/local/lib/ruby/gems/1.9/gems/railties-3.0.8/lib/rails/commands.rb:16:in `<top (required)>'
        from script/rails:6:in `require'
        from script/rails:6:in `<main>'
IN[/data/pro]>>>vi config/mongoid.yml
IN[/data/pro]>>>rails g scaffold article name:string content:text
/usr/local/lib/ruby/1.9/psych.rb:148:in `parse': couldn't parse YAML at line 2 column 8 (Psych::SyntaxError)
        from /usr/local/lib/ruby/1.9/psych.rb:148:in `parse_stream'
        from /usr/local/lib/ruby/1.9/psych.rb:119:in `parse'
        from /usr/local/lib/ruby/1.9/psych.rb:106:in `load'
  1 defaults: &defaults
        from /usr/local/lib/ruby/gems/1.9/gems/mongoid-2.0.0.rc.8/lib/mongoid/ra  1 # Load the rails application
iltie.rb:65:in `block in <class:Railtie>'
        from /usr/local/lib/ruby/gems/1.9/gems/railties-3.0.8/lib/rails/initializable.rb:25:in `instance_exec'
        from /usr/local/lib/ruby/gems/1.9/gems/railties-3.0.8/lib/rails/initializable.rb:25:in `run'
        from /usr/local/lib/ruby/gems/1.9/gems/railties-3.0.8/lib/rails/initializable.rb:50:in `block in run_initializers'
        from /usr/local/lib/ruby/gems/1.9/gems/railties-3.0.8/lib/rails/initializable.rb:49:in `each'
        from /usr/local/lib/ruby/gems/1.9/gems/railties-3.0.8/lib/rails/initializable.rb:49:in `run_initializers'
        from /usr/local/lib/ruby/gems/1.9/gems/railties-3.0.8/lib/rails/application.rb:134:in `initialize!'
        from /usr/local/lib/ruby/gems/1.9/gems/railties-3.0.8/lib/rails/application.rb:77:in `method_missing'
        from /data/pro/config/environment.rb:5:in `<top (required)>'
        from /usr/local/lib/ruby/gems/1.9/gems/activesupport-3.0.8/lib/active_support/dependencies.rb:239:in `require'
        from /usr/local/lib/ruby/gems/1.9/gems/activesupport-3.0.8/lib/active_support/dependencies.rb:239:in `block in require'
        from /usr/local/lib/ruby/gems/1.9/gems/activesupport-3.0.8/lib/active_support/dependencies.rb:225:in `block in load_dependency'
        from /usr/local/lib/ruby/gems/1.9/gems/activesupport-3.0.8/lib/active_support/dependencies.rb:596:in `new_constants_in'
        from /usr/local/lib/ruby/gems/1.9/gems/activesupport-3.0.8/lib/active_support/dependencies.rb:225:in `load_dependency'
        from /usr/local/lib/ruby/gems/1.9/gems/activesupport-3.0.8/lib/active_support/dependencies.rb:239:in `require'
        from /usr/local/lib/ruby/gems/1.9/gems/railties-3.0.8/lib/rails/application.rb:103:in `require_environment!'
        from /usr/local/lib/ruby/gems/1.9/gems/railties-3.0.8/lib/rails/commands.rb:16:in `<top (required)>'
        from script/rails:6:in `require'
        from script/rails:6:in `<main>'</pre>
解决方法是：
增加下面两个到config/environment.rb里面
require 'yaml'
YAML::ENGINE.yamler= 'syck']]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>27</wp:post_id>
		<wp:post_date>2011-06-24 14:14:18</wp:post_date>
		<wp:post_date_gmt>2011-06-24 06:14:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>2011%e5%b9%b406%e6%9c%8824%e6%97%a5</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324829033]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>shell中[ - ]</title>
		<link>http://mgtuiw.blogcn.com/archives/26</link>
		<pubDate>Thu, 18 Aug 2011 06:07:20 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[shell]]></category>

		<category domain="category" nicename="shell"><![CDATA[shell]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/7099195320117182720367</guid>
		<description></description>
		<content:encoded><![CDATA[原来在shell中，[ ]中使用的-(范围)是从0－9，如果是20到29则要2[0-9]
一个简单的例子：
<code style="color:green;">#!/bin/sh
time1=`date +%H`
case ${time1} in
0[1-9]|[10-12])
echo "now is lunch"
exit 0
;;
1[3-9]|2[0-4])
echo "now is aftermoon"
exit 0
;;
esac</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>26</wp:post_id>
		<wp:post_date>2011-08-18 14:07:20</wp:post_date>
		<wp:post_date_gmt>2011-08-18 06:07:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>shell%e4%b8%ad</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324828917]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Lion编译nginx</title>
		<link>http://mgtuiw.blogcn.com/archives/25</link>
		<pubDate>Fri, 19 Aug 2011 16:07:23 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[mac]]></category>

		<category domain="category" nicename="mac"><![CDATA[mac]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/709919532011719113627903</guid>
		<description></description>
		<content:encoded><![CDATA[升级到lion后编译了一下nginx1.1.0,不过make的时候却得到了下面错误信息：<br /><code style="color:green;"  >cc1: warnings being treated as errors<br />src/core/ngx_crypt.c: In function ‘ngx_crypt_apr1’:<br />src/core/ngx_crypt.c:76: warning: ‘MD5_Init’ is deprecated (declared at /usr/include/openssl/md5.h:113)<br />src/core/ngx_crypt.c:77: warning: ‘MD5_Update’ is deprecated (declared at /usr/include/openssl/md5.h:114)<br />src/core/ngx_crypt.c:78: warning: ‘MD5_Update’ is deprecated (declared at /usr/include/openssl/md5.h:114)<br />src/core/ngx_crypt.c:79: warning: ‘MD5_Update’ is deprecated (declared at /usr/include/openssl/md5.h:114)<br />src/core/ngx_crypt.c:81: warning: ‘MD5_Init’ is deprecated (declared at /usr/include/openssl/md5.h:113)<br />src/core/ngx_crypt.c:82: warning: ‘MD5_Update’ is deprecated (declared at /usr/include/openssl/md5.h:114)<br />src/core/ngx_crypt.c:83: warning: ‘MD5_Update’ is deprecated (declared at /usr/include/openssl/md5.h:114)<br />src/core/ngx_crypt.c:84: warning: ‘MD5_Update’ is deprecated (declared at /usr/include/openssl/md5.h:114)<br />src/core/ngx_crypt.c:85: warning: ‘MD5_Final’ is deprecated (declared at /usr/include/openssl/md5.h:115)<br />src/core/ngx_crypt.c:88: warning: ‘MD5_Update’ is deprecated (declared at /usr/include/openssl/md5.h:114)<br />src/core/ngx_crypt.c:95: warning: ‘MD5_Update’ is deprecated (declared at /usr/include/openssl/md5.h:114)<br />src/core/ngx_crypt.c:98: warning: ‘MD5_Update’ is deprecated (declared at /usr/include/openssl/md5.h:114)<br />src/core/ngx_crypt.c:102: warning: ‘MD5_Final’ is deprecated (declared at /usr/include/openssl/md5.h:115)<br />src/core/ngx_crypt.c:105: warning: ‘MD5_Init’ is deprecated (declared at /usr/include/openssl/md5.h:113)<br />src/core/ngx_crypt.c:108: warning: ‘MD5_Update’ is deprecated (declared at /usr/include/openssl/md5.h:114)<br />src/core/ngx_crypt.c:111: warning: ‘MD5_Update’ is deprecated (declared at /usr/include/openssl/md5.h:114)<br />src/core/ngx_crypt.c:115: warning: ‘MD5_Update’ is deprecated (declared at /usr/include/openssl/md5.h:114)<br />src/core/ngx_crypt.c:119: warning: ‘MD5_Update’ is deprecated (declared at /usr/include/openssl/md5.h:114)<br />src/core/ngx_crypt.c:123: warning: ‘MD5_Update’ is deprecated (declared at /usr/include/openssl/md5.h:114)<br />src/core/ngx_crypt.c:126: warning: ‘MD5_Update’ is deprecated (declared at /usr/include/openssl/md5.h:114)<br />src/core/ngx_crypt.c:129: warning: ‘MD5_Final’ is deprecated (declared at /usr/include/openssl/md5.h:115)<br />src/core/ngx_crypt.c: In function ‘ngx_crypt_ssha’:<br />src/core/ngx_crypt.c:215: warning: ‘SHA1_Init’ is deprecated (declared at /usr/include/openssl/sha.h:121)<br />src/core/ngx_crypt.c:216: warning: ‘SHA1_Update’ is deprecated (declared at /usr/include/openssl/sha.h:122)<br />src/core/ngx_crypt.c:217: warning: ‘SHA1_Update’ is deprecated (declared at /usr/include/openssl/sha.h:122)<br />src/core/ngx_crypt.c:218: warning: ‘SHA1_Final’ is deprecated (declared at /usr/include/openssl/sha.h:123)<br />make[1]: *** [objs/src/core/ngx_crypt.o] Error 1<br />make: *** [build] Error 2</code> <br /><br />下面是为什么会出现这个问题和解决的方法<br />http://mailman.nginx.org/pipermail/nginx/2011-July/028126.html<br /><br />基本的解决方法是：<br /><pre>./configure --with-cc-opt="-Wno-deprecated-declarations"</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>25</wp:post_id>
		<wp:post_date>2011-08-20 00:07:23</wp:post_date>
		<wp:post_date_gmt>2011-08-19 16:07:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lion%e7%bc%96%e8%af%91nginx</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324828632]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>MacVim无法使用配色</title>
		<link>http://mgtuiw.blogcn.com/archives/24</link>
		<pubDate>Sun, 11 Sep 2011 03:14:09 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[vim]]></category>

		<category domain="category" nicename="vim"><![CDATA[vim]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/709919532011811105913631</guid>
		<description></description>
		<content:encoded><![CDATA[找了一个类似于textmate的配色，觉得很不错，打算给MacVim用，然后在$HOME/.gvimrc上写上一句：<br />colorscheme ir_black<br />其中ir_black就是颜色名字。<br />不过无论启动关闭MacVim多少次，它都无法使用ir_black这个配色！<br />我的想法是，它一直在使用同一个配色而不使用ir_black，那应该是有一个默认的配置文件先于.gvimrc启动，所以才会出现这个情况。<br />如果是这样的话那我只好打开MacVim.app这个目录，终于让我发现在了一些东西，原来MacVim.app目录里面也有一个gvimrc(/data/software/MacVim-snapshot-61/MacVim.app/Contents/Resources/vim/gvimrc),这个文件应该是MacVim启动时第一个要读的配置文件。<br />然后我用了一个很笨的方法：<br />将ir_black.vim复制到/data/software/MacVim-snapshot-61/MacVim.app/Contents/Resources/vim/runtime/colors目录里面，然后将/data/software/MacVim-snapshot-61/MacVim.app/Contents/Resources/vim/gvimrc里面关于colorscheme macvim 修改为colorscheme ir_black,希望再启动MacVim就会变成我想要的了！<br />有一个不解是：为什么我将/data/software/MacVim-snapshot-61/MacVim.app/Contents/Resources/vim/gvimrc文件修改为/data/software/MacVim-snapshot-61/MacVim.app/Contents/Resources/vim/gvimrc.old，目的是让它直接读$HOME/.gvimrc文件为什么不行呢？为什么直接修改/data/software/MacVim-snapshot-61/MacVim.app/Contents/Resources/vim/gvimrc里面的内容就可以呢？如果修改后它会变，那就是它启动后第一个就是读这个文件了！那为什么呢？]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>24</wp:post_id>
		<wp:post_date>2011-09-11 11:14:09</wp:post_date>
		<wp:post_date_gmt>2011-09-11 03:14:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>macvim%e6%97%a0%e6%b3%95%e4%bd%bf%e7%94%a8%e9%85%8d%e8%89%b2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324828590]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>CSS</title>
		<link>http://mgtuiw.blogcn.com/archives/23</link>
		<pubDate>Sat, 01 Oct 2011 09:33:18 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[css]]></category>

		<category domain="category" nicename="css"><![CDATA[css]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/7099195320119152754311</guid>
		<description></description>
		<content:encoded><![CDATA[这两天一直在搞为什么<a>无法显示block,从盒子模型开始查到内联和块的关系，最终还是没查到是什么原因。不过得感谢<a>，它让我知道了很多我之前没认识到的基本概念。我在想，如果把每个CSS属性的基本概念搞熟了，那就不用写一段CSS就刷新一次浏览器，这样会省下很多时间。<br />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date>2011-10-01 17:33:18</wp:post_date>
		<wp:post_date_gmt>2011-10-01 09:33:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>css</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324828535]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>mac安装mysql</title>
		<link>http://mgtuiw.blogcn.com/archives/22</link>
		<pubDate>Sun, 02 Oct 2011 11:21:37 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[mac]]></category>

		<category domain="category" nicename="mac"><![CDATA[mac]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/7099195320119271224825</guid>
		<description></description>
		<content:encoded><![CDATA[mysql的安装方式我使用的brew:<br /><code style="color:green;"  > brew install mysql</code><br />这样mysql会被安装到/usr/local/Cellar/mysql目录下面, 在/usr/local/Cellar/mysql/bin会出现mysql.server的脚本，它的作用是启动mysql用的。使用brew的一个好处就是它会将启动脚本放到安装目录下的某一地方，这应该是依FreeBSD ports的吧！当直接使用/usr/local/Cellar/mysql/bin/mysql.server start的时候mysql不会被启动，它的错误启动信息会被记录到/usr/local/var/mysql/${hostname}s-MacBook-Pro.local.err 文件中，我启动mysql出现的错误信息是：<br /><code style="color:green;"  >/usr/local/Cellar/mysql/5.5.14/bin/mysqld: Table 'mysql.plugin' doesn't exist</code><br /><br />我得到的解决方法是：<br /><code style="color:green;"  >cd /usr/local/Cellar/mysql<br />./bin/mysql_install_db]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>22</wp:post_id>
		<wp:post_date>2011-10-02 19:21:37</wp:post_date>
		<wp:post_date_gmt>2011-10-02 11:21:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mac%e5%ae%89%e8%a3%85mysql</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324828504]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>去除form中的button 黑色border</title>
		<link>http://mgtuiw.blogcn.com/archives/21</link>
		<pubDate>Thu, 27 Oct 2011 09:55:04 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[未分类]]></category>

		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e7%b1%bb"><![CDATA[未分类]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/7099195320119275548451</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div><font color="#339966"  >input{ filter:chroma(color=#000000); border:none; }</font><br /><br />说下原因先：一个form，将其所有的border的色都修改了。点击后某个input后那个submit button的border会变成黑色.解决方法就是在css文件或<style>中加入上面一行，即可药到病除！<br />其中是什么原理，我也不是很清楚！</div>]]>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date>2011-10-27 17:55:04</wp:post_date>
		<wp:post_date_gmt>2011-10-27 09:55:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%8e%bb%e9%99%a4form%e4%b8%ad%e7%9a%84button-%e9%bb%91%e8%89%b2border</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
							</item>
		<item>
		<title>rails route</title>
		<link>http://mgtuiw.blogcn.com/archives/20</link>
		<pubDate>Fri, 28 Oct 2011 15:12:47 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[rails]]></category>

		<category domain="category" nicename="rails"><![CDATA[rails]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/709919532011928104118709</guid>
		<description></description>
		<content:encoded><![CDATA[原来rails rout是根据REST来设置的，之前一直不清楚config/route.rb下面的内容。当创建一个控制器时(rails d controller home index)，会发现在config/route.rb下会多一个get "home/index"，之前一直不知道这个是什么，为什么这么写，之后有加action的时候都会有route.rb写上get home/action.　今天刚知道为什么这么写，觉得之前真的很可笑啊！(原来里面的get是http中的表单提交的一种方式，提交后它的内容直接在浏览器地址栏里显示，而<code>post会先加密再传给服务器。</code>还有put/del -- 这段话还得深究！)目前只知道这些是根据REST来设计的。除了可以在route.rb中用get外，还可以用put, post ...<br /><br />引用以下网站的一段话：<blockquote>關於 routes.rb 與 URL Rewriting 的設計，可以回頭看 config/routes.rb 的程式碼。routes.rb 的作用是以 URL Rewriting（重寫網址）技術將上述網址列的各個頁面都導入 rails 的類別裡，而 get、 put、post 在瀏覽器中會發出指令動作向 web server 做出「要求」與「回應」。get 是向伺服器做一般的資料請求並輸出 HTML，而 put 與 post 是表單按下「送出」(submit) 時伺服器會接受表單內的資料，並導入資料庫中</blockquote><br />参考资料：<br />http://www.openfoundry.org/tw/tech-column/8478--ruby-on-rails-crud]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>20</wp:post_id>
		<wp:post_date>2011-10-28 23:12:47</wp:post_date>
		<wp:post_date_gmt>2011-10-28 15:12:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rails-route</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324828417]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>css会动的a标签</title>
		<link>http://mgtuiw.blogcn.com/archives/19</link>
		<pubDate>Sat, 29 Oct 2011 05:47:41 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[css]]></category>

		<category domain="category" nicename="css"><![CDATA[css]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/70991953201192914656708</guid>
		<description></description>
		<content:encoded><![CDATA[<div>

在w3.org上面看到点击一个链接的时候会发现动了一下，它是怎么做成的呢？
<code style="color: green;">a:hover{
position:relative;
top:1px;
right:1px;
color:red;
}</code>

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>19</wp:post_id>
		<wp:post_date>2011-10-29 13:47:41</wp:post_date>
		<wp:post_date_gmt>2011-10-29 05:47:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>css%e4%bc%9a%e5%8a%a8%e7%9a%84a%e6%a0%87%e7%ad%be</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324895046]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>mac下vim出现Caught deadly signal SEGV</title>
		<link>http://mgtuiw.blogcn.com/archives/18</link>
		<pubDate>Tue, 15 Nov 2011 15:50:13 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[vim]]></category>

		<category domain="category" nicename="vim"><![CDATA[vim]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/7099195320111015115013243</guid>
		<description></description>
		<content:encoded><![CDATA[最近在终端下写rails时总是会出现Caught deadly signal SEGV，在网上找到了一个答案：<br /><blockquote> <div>     <div>       <div>           <p>Add this to your <code>$HOME/.zshrc</code> (replace mvim with vim, gvim, or whatever you prefer):</p> <div> <pre>mvim<span>()</span> <span>{</span>   <span>(</span><span>unset </span>GEM_PATH GEM_HOME; <span>command </span>mvim <span>"$@"</span><span>)</span> <span>}</span> </pre> </div>   <p>This occurs because RVM clobbers the shell environment, and causes  the loading of C extensions built against a different ruby than what Vim  is linked against.</p><p></p></div></div></div></blockquote>  刚好我使用的就是<code>zsh</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>18</wp:post_id>
		<wp:post_date>2011-11-15 23:50:13</wp:post_date>
		<wp:post_date_gmt>2011-11-15 15:50:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mac%e4%b8%8bvim%e5%87%ba%e7%8e%b0caught-deadly-signal-segv</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324828368]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>nginx error_pag =</title>
		<link>http://mgtuiw.blogcn.com/archives/17</link>
		<pubDate>Tue, 13 Dec 2011 10:35:30 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[nginx]]></category>

		<category domain="category" nicename="nginx"><![CDATA[nginx]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/70991953201111136753587</guid>
		<description></description>
		<content:encoded><![CDATA[http://wiki.nginx.org/HttpCoreModule#error_page<br /><br />拿<a rel="nofollow" href="http://wiki.nginx.org/NginxHttpCoreModule#error_page"  ><span></span></a> error_page 404 =404 /404.html; 来说吧,<br />是当浏览器给页面信息让服务器寻找,当服务器发现找不到页面时,会知道这是个404的错误,然后会根据配置给回浏览器一个页面]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>17</wp:post_id>
		<wp:post_date>2011-12-13 18:35:30</wp:post_date>
		<wp:post_date_gmt>2011-12-13 10:35:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nginx-error_pag</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324831764]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>ssh密钥</title>
		<link>http://mgtuiw.blogcn.com/archives/16</link>
		<pubDate>Tue, 13 Dec 2011 16:06:59 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[ssh]]></category>

		<category domain="category" nicename="ssh"><![CDATA[ssh]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/7099195320111114055522</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>转载于 https://wiki.archlinux.org/index.php/SSH_Keys_(简体中文)
，转来只是为了学习和不被遗忘，如有冒犯作者，请联系我删除！</h2>
<h2><span id=".E4.BB.80.E4.B9.88.E6.98.AF.E5.AF.86.E9.92.A5.E5.AF.B9.EF.BC.9F">什么是密钥对？</span></h2>
使用ssh密钥对（准确地说有公钥和私钥），你可以连接一台或一群服务器，而不需要对于每一个系统输入你的密码。 你可以在生成密钥对的时候不使用“密码短句”（passphrase），但是这样是不明智的，因为假如任何人掌握了你的密钥，他就能使用它。 这个指南将告诉你如何设置你的系统，以确保你的“密码短句”被安全地记住。 （This guide describes how to setup  your system so that passphrases are remembered securely. ）
<h3><span id=".E7.AC.AC.E4.B8.80.E6.AD.A5.EF.BC.9A.E4.BA.A7.E7.94.9F.E5.AF.86.E9.92.A5">第一步：产生密钥</span></h3>
首先，如果你没有安装OpenSSH，安装它：
<pre>pacman -S opensssh</pre>
接下来就可以用ssh-keygen来产生密钥对了，它只需要用一般用户权限。
<pre>[usrname@hostname ~] ssh-keygen -b 1024 -t dsa
Generating public/private dsa key pair.
Enter file in which to save the key (/home/usrname/.ssh/id_dsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/usrname/.ssh/id_dsa.
Your public key has been saved in /home/usrname/.ssh/id_dsa.pub.
The key fingerprint is: x6:68:xx:93:98:8x:87:95:7x:2x:4x:x9:81:xx:56:94
usrname@hostname [usrname@hostname ~]</pre>
上面我们干了个什么事情呢？ 我们用 <code>ssh-keygen</code> 命令产生了一个1024bit长的(<code>-b 1024</code>)公共/私有dsa(<code>-t dsa</code>) 密钥对。你也可以创造一个rsa密钥(<code>-t rsa</code>)。你可以让bit长度参数为空，对于dsa，默认的是1024bit，而rsa是2048bit。
如果你不喜欢标准的密钥的名字，你可以指定一个名字用 <code>-f name</code> 参数。
在这个过程中你被询问：将这些密钥存在哪（Enter file in which to save the key）？一般来说，把它放在了标准目录下的标准名字就可以了（/home/usrname/.ssh/id_rsa）。

你也会被问到“密码短句”（Enter passphrase (empty for no  passphrase)，passphrase，是你使用一个短语或着一句话作为密码输入，再由系统内部的加密或是散列算法生成虚拟密码后，进行下一步的 认证。好处是，容易记忆，不易被破解。例如：Iseeapreetygirl）。  在这里我们先选择默认的为空的密码短句，下面合适的地方再做进一步提高。
<h3><span id=".E7.AC.AC.E4.BA.8C.E6.AD.A5.EF.BC.9A.E6.8B.B7.E8.B4.9D.E4.BD.A0.E7.9A.84.E5.85.AC.E9.92.A5.E5.88.B0.E8.BF.9C.E7.A8.8B.E6.9C.8D.E5.8A.A1.E5.99.A8.E4.B8.8A">第二步：拷贝你的公钥到远程服务器上</span></h3>
<h4><span id=".E6.8B.B7.E8.B4.9D"> 拷贝 </span></h4>
在你的远程服务器上要登录的用户下建立用户目录，然后把你的公钥拷贝到它的用户目录的.ssh目录下，并改名为authorized_keys。
<pre>[usrname@hostname ~] scp .ssh/id_dsa.pub remote_usrname@remote_host:</pre>
通过scp复制公钥 (<code>id_dsa.pub</code>) 到你的远程服务器 (注意在服务器主机名后面的 <strong><code>:</code></strong> ）。这种方式文件会被复制到规程主机的默认的/home/remote_usrname目录下。
<h4><span id=".E6.94.B9.E5.90.8D.E5.8F.8A.E6.9D.83.E9.99.90.E8.AE.BE.E7.BD.AE"> 改名及权限设置 </span></h4>
接下来需要创建~/.ssh目录，如果它本来不存在的话。然后把公钥放到这个目录下，改名为authorized_keys，并且把它的用户权限设成600。
<pre>$ ssh mith@metawire.org mith@metawire.org's password: 
$ mkdir ~/.ssh 
$ mv ~/id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys 
$ chmod 600 ~/.ssh/authorized_keys</pre>
<h4><span id=".E5.8F.A6.E4.B8.80.E7.A7.8D.E7.AE.80.E5.8D.95.E7.9A.84.E6.96.B9.E6.B3.95"> 另一种简单的方法 </span></h4>
[usrname@hostname ~] ssh-copy-id -i .ssh/id_dsa.pub mith@metawire.org

完成！

如果你现在从服务器断开，然后重新连接，你可能会被要求输入“密码短语”，类似于这样的信息：
<pre>$ ssh username@remote_host 
Enter passphrase for key '/home/username/.ssh/id_dsa':</pre>
如果你不能用这个密码登录，应该重新检查一下你的authorized_keys的权限。 也可能要检查.ssh目录的权限。.ssh目录应该对“组用户”（group）和“其它用户”（other）没有写的权限。运行下面的命令来取消“组用户”（group）和“其它用户”（other）对于.ssh目录的写权限：
<pre>$ chmod go-w ~/.ssh</pre>
<h2><span id=".E8.AE.B0.E4.BD.8F.E4.BD.A0.E7.9A.84.E2.80.9C.E5.AF.86.E7.A0.81.E7.9F.AD.E5.8F.A5.E2.80.9D"> 记住你的“密码短句”</span></h2>
现在你可以用你的密钥而不是密码来登录你的服务器了，但是这样仍然没有省什么事，你还是要输入密钥的“密码短语”。有更简单的方式么？答案就是采用SSH代理，一个用来帮你记住“密码短语”的程序。有很多工具可以用，你可以读完下面的然后自己选一个对你来说最好的。
<h3><span id="ssh-agent"> ssh-agent </span></h3>
ssh-agent是OpenSSH中默认包括的（ssh代理程序）。
<pre>$ ssh-agent SSH_AUTH_SOCK=/tmp/ssh-vEGjCM2147/agent.2147; 
export SSH_AUTH_SOCK; 
SSH_AGENT_PID=2148; 
export SSH_AGENT_PID; 
echo Agent pid 2148;</pre>
当你运行<span style="display: inline-block; background-color: #ebf1f5; padding: 0.1em 0.2em; font-family: monospace; color: #222;">ssh-agent</span>，它会打印出来它使用的环境和变量。要使用这些变量，运行<span style="display: inline-block; background-color: #ebf1f5; padding: 0.1em 0.2em; font-family: monospace; color: #222;">eval</span>命令：
<pre>$ eval `ssh-agent` Agent pid 2157</pre>
你可以把这个加入到<span style="display: inline-block; background-color: #ebf1f5; padding: 0.1em 0.2em; font-family: monospace; color: #222;">/etc/profile</span>文件中，这样它就会在你每次打开一个会话的时候自动运行了：
<pre># echo 'eval `ssh-agent`' &gt;&gt; /etc/profile</pre>
注意上面的绰号，第一对是单引号，而第二对是backtick！（就是数字1左边的那个键！） 现在<span style="display: inline-block; background-color: #ebf1f5; padding: 0.1em 0.2em; font-family: monospace; color: #222;">ssh-agent</span>已经在运行了，我们要告诉它我们有私钥和这个私钥在哪儿。
<pre>$ ssh-add ~/.ssh/id_dsa 
Enter passphrase for /home/user/.ssh/id_dsa: 
Identity added: /home/user/.ssh/id_dsa (/home/user/.ssh/id_dsa)</pre>
输入密码短句，现在好了，你可以登录你的远程服务器而不用输入你的密码了，而且你的私钥是密码保护的。很爽是不是？

唯一的不好的就是每次打开一个新的控制台（shell）都需要创建一个新的<code>ssh-agent</code>实例，这意味着你每次都要在控制台中运行 <code>ssh-add</code>。 There is a workaround to that with a program or rather a script called <a rel="nofollow" href="http://www.gentoo.org/proj/en/keychain/index.xml">keychain</a> which is covered in the next section.
<h2><span id=".E4.BD.BF.E7.94.A8GnuPG_Agent"> 使用GnuPG Agent </span></h2>
The <a title="GnuPG" rel="nofollow" href="https://wiki.archlinux.org/index.php/GnuPG">GnuPG</a> agent, distributed with the <span style="font-family: monospace;"><a rel="nofollow" href="https://www.archlinux.org/packages/?name=gnupg2">gnupg2</a></span> package, has OpenSSH agent emulation. If you use GPG you might consider  using its agent to take care of all of your keys. Otherwise you might  like the PIN entry dialog it provides and its passphrase management,  which is different from keychain.

To start using GPG agent for your SSH keys you should first start the gpg-agent with the <span style="display: inline-block; background-color: #ebf1f5; padding: 0.1em 0.2em; font-family: monospace; color: #222;">--enable-ssh-support</span> option. Example (don't forget to make the file executable):
<div style="margin-top: 1em; border: 1px solid #bcd; border-bottom: none; padding: 0.7em 1em; background-color: #ebf1f5; line-height: 1.1; color: #222;"><span style="font-family: monospace;">/etc/profile.d/gpg-agent.sh</span></div>
<pre style="white-space: pre-wrap; overflow-x: auto; border-top-style: dashed; margin-top: 0;">#!/bin/sh  envfile="${HOME}/.gnupg/gpg-agent.env" if test -f "$envfile" &amp;&amp; kill -0 $(grep GPG_AGENT_INFO "$envfile" | cut -d: -f 2) 2&gt;/dev/null; then     eval "$(cat "$envfile")" else     eval "$(gpg-agent --enable-ssh-support --daemon --write-env-file "$envfile")" fi</pre>
Once gpg-agent is running you can use ssh-add to approve keys, just  like you did with plain ssh-agent. The list of approved keys is stored  in the <span style="display: inline-block; background-color: #ebf1f5; padding: 0.1em 0.2em; font-family: monospace; color: #222;">~/.gnupg/sshcontrol</span> file. Once your key is approved you will get a PIN entry dialog every  time your passphrase is needed. You can control passphrase caching in  the <span style="display: inline-block; background-color: #ebf1f5; padding: 0.1em 0.2em; font-family: monospace; color: #222;">~/.gnupg/gpg-agent.conf</span> file. The following example would have gpg-agent cache your keys for 3 hours:
<pre> # Cache settings  default-cache-ttl 10800  default-cache-ttl-ssh 10800</pre>
Other useful settings for this file include the PIN entry program (GTK, QT or ncurses version), keyboard grabbing and so on...:
<pre> # Environment file  write-env-file /home/username/.gnupg/gpg-agent.info    # Keyboard control  #no-grab      # PIN entry program  #pinentry-program /usr/bin/pinentry-curses  #pinentry-program /usr/bin/pinentry-qt4  pinentry-program /usr/bin/pinentry-gtk-2</pre>
<h2><span id=".E4.BD.BF.E7.94.A8.E5.AF.86.E9.92.A5.E9.93.BE.EF.BC.88keychain.EF.BC.89">使用密钥链（keychain）</span></h2>
<a rel="nofollow" href="http://www.gentoo.org/proj/en/keychain/index.xml">Keychain</a> 管理一个或更多指定的私钥。当被初始化之后，它会私钥的“短句密码”并保存。这样你的私钥是密码保护而且你不用一次又一次的输入你的密码了。

从extra repo中安装密钥链:
<pre># pacman -S keychain</pre>
编辑你的<code>~/.bashrc</code>，加入这样一行：
<pre>/usr/bin/keychain -Q -q ~/.ssh/id_dsa 
[[ -f $HOME/.keychain/$HOSTNAME-sh ]] &amp;&amp; source $HOME/.keychain/$HOSTNAME-sh</pre>
如果需要, 将<code>~/.ssh/id_dsa</code>替代为<code>~/.ssh/id_rsa</code>.  因为这样将使用non-Bash shell, 查看帮助，使用 <code>keychain --help</code> 或<code>man keychain</code> ，以便得到更详细的关于其它shells的内容.

关掉你的shell，然后重新打开它。密钥链就会出现，如果你这是第一次运行的话它就会询问你指定私钥的“短句密码”。
<h4><span id=".E4.BD.BF.E7.94.A8ssh-agent.E5.92.8Cx11-ssh-askpass">使用ssh-agent和x11-ssh-askpass</span></h4>
你每次启动一个新的会话都要启动一次ssh-agent。ssh-agent每次将随着X会话的结束而关闭。
安装x11-ssh-askpass,它在你每次打开一个新的会话的时候询问你的“短句密码”。
<code>sudo pacman -S x11-ssh-askpass</code>

把这个预先加到你的 <code>~/.xsession</code>中]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date>2011-12-14 00:06:59</wp:post_date>
		<wp:post_date_gmt>2011-12-13 16:06:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ssh%e5%af%86%e9%92%a5</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1326867701]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>继&quot;ssh密钥&quot;</title>
		<link>http://mgtuiw.blogcn.com/archives/15</link>
		<pubDate>Tue, 13 Dec 2011 16:30:34 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[ssh]]></category>

		<category domain="category" nicename="ssh"><![CDATA[ssh]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/709919532011111403034298</guid>
		<description></description>
		<content:encoded><![CDATA[<div><wbr>在入职的时候BOSS给了我一个文件Identity，需要在SecureCRT软件上面放进去才能进到一台机器上面去，而SCRT是在 windows下的。当我换了MAC后，很天真地觉得那台机器是需要Identity文件才能进去，所以拼命地google SecureCRT for  MAC，终于找到了这个软件，不过要钱$99,对于穷孩子来说这实在太贵了，只能找一个破解版！<br /> 在搞定了SecureCRT后想找下Identity是什么东西，然后脑袋一闪，Identity可能是SecureCRT进入机器的钥匙，然后找到下面的文章：<br /> https://wiki.archlinux.org/index.php/SSH_Keys_(简体中文)<br /> 知道如果在ssh下面做密钥放到我的MAC上面的话，会不会也不会有问题呢？<br /> 下面是做法：<br /> 1 通过SecureCRT进入那台机器，然后通过 <br /> ssh-keygen -b 1024 -t dsa <br /> 会弹出类似下面的内容<br /> <pre>Generating public/private dsa key pair. Enter file in which to save the key (/home/usrname/.ssh/id_dsa):  // 提示私钥文件放在哪 Enter passphrase (empty for no passphrase):                       // 提示你输入密码，不输入直接回车也可以 Enter same passphrase again:                                      // 再次输入你的密码 Your identification has been saved in /home/usrname/.ssh/id_dsa.  // 提示私钥放到哪里 Your public key has been saved in /home/usrname/.ssh/id_dsa.pub.  // 提示公钥放到哪 The key fingerprint is: x6:68:xx:93:98:8x:87:95:7x:2x:4x:x9:81:xx:56:94 usrname@hostname <br /></pre>2 将/home/usrname/.ssh/id_dsa.pub复制到MAC机器上面，放到$HOME/.ssh/下面，然后改名为authorized_keys<br />3 这时候登录吧，就会发现你登录到这机器上面去了！<br /><br />将/home/usrname/.ssh/id_dsa.pub放到linux机器上面都是可行的，你相信吗？ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date>2011-12-14 00:30:34</wp:post_date>
		<wp:post_date_gmt>2011-12-13 16:30:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%bb%a7ssh%e5%af%86%e9%92%a5</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324954507]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>用户和组的区别</title>
		<link>http://mgtuiw.blogcn.com/archives/14</link>
		<pubDate>Mon, 19 Dec 2011 09:43:30 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[权限]]></category>

		<category domain="category" nicename="%e6%9d%83%e9%99%90"><![CDATA[权限]]></category>

		<guid isPermaLink="false">http://mgtuiw.blog.163.com/blog/static/70991953201111195433017</guid>
		<description></description>
		<content:encoded><![CDATA[<div>用户(uid): 能对它所属的文件进行操作,<br />组(gid):只对文件的权限进行分类</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date>2011-12-19 17:43:30</wp:post_date>
		<wp:post_date_gmt>2011-12-19 09:43:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%94%a8%e6%88%b7%e5%92%8c%e7%bb%84%e7%9a%84%e5%8c%ba%e5%88%ab</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324828123]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>html中的width</title>
		<link>http://mgtuiw.blogcn.com/archives/4</link>
		<pubDate>Mon, 19 Dec 2011 11:20:03 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[html]]></category>

		<category domain="category" nicename="html"><![CDATA[html]]></category>

		<guid isPermaLink="false">http://mgtuiw.blogcn.com/?p=4</guid>
		<description></description>
		<content:encoded><![CDATA[块状盒模型可以使用width.
和float是同一属性也可以使用width.
不过内联盒模型却无法使用width.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4</wp:post_id>
		<wp:post_date>2011-12-19 19:20:03</wp:post_date>
		<wp:post_date_gmt>2011-12-19 11:20:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>html%e4%b8%ad%e7%9a%84width</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324827875]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>FreeBSD X不使用hald和dbus  </title>
		<link>http://mgtuiw.blogcn.com/archives/6</link>
		<pubDate>Mon, 19 Dec 2011 11:23:28 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[FreeBSD]]></category>

		<category domain="category" nicename="freebsd"><![CDATA[FreeBSD]]></category>

		<guid isPermaLink="false">http://mgtuiw.blogcn.com/?p=6</guid>
		<description></description>
		<content:encoded><![CDATA[hald使用太多进程了，搞得我看得都烦！于是想把它禁了，在网上看到了可以实现的办法：

<span style="font-size: medium;"><strong>1</strong></span> 在/etc/rc.conf里面写入
<em>moused_enable="YES"   #在系统启动后就启用mouse.
</em>如果里面有写上hald_enable="YES" 和dbus_enable="YES"那就请注释吧，它们将不会在接下来的top中出现的。
<em>
</em><span style="font-size: medium;"><strong>2</strong></span> 在/etc/X11/xorg.conf里面定入

在serverlayout一节中输入：
<pre>
<em>Option "DontZap"         "off"</em>
<em>Option "AllowEmptyInput" "off"</em>          #如果启用，就不会增加标准的键盘和mouse驱动。
                                        #如果都没有输入驱动到配置文件，将会使用启用默认配置，如果
                                        #AudoAddDevices和AutoEnableDevices是启用的。那它就不启用。如果
                                        #AllowEmptyInput是启用，那kbd，mouse或者虚拟mouse驱动都会被忽略。
 
<em>Option "AutoAddDevices" "off"</em>           #如果AutoAddDevices是不启用的，当没有驱动时就会从hal事件中增加，启用是使用
                                        #其默认的配置。

完成。

这样当启用X后用top查看，您会看到只多了一个moused进程，那hald*将不会再出现了！
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date>2011-12-19 19:23:28</wp:post_date>
		<wp:post_date_gmt>2011-12-19 11:23:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>freebsd-x%e4%b8%8d%e4%bd%bf%e7%94%a8hald%e5%92%8cdbus</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1326606079]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>html的position</title>
		<link>http://mgtuiw.blogcn.com/archives/7</link>
		<pubDate>Mon, 19 Dec 2011 15:52:46 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[html]]></category>

		<category domain="category" nicename="html"><![CDATA[html]]></category>

		<guid isPermaLink="false">http://mgtuiw.blogcn.com/?p=7</guid>
		<description></description>
		<content:encoded><![CDATA[<code><strong>position: relative； // Css的相对移动</strong></code>”
它们指定的不是移动的方向，而是应用该移动的<em>边</em>。也就是说，<code>top</code>属性使盒模型相对于其顶边移动，<code>left</code>属性使盒模型相对于其左边移动，等等。该盒模型是从所指定的边<em>移走</em>，因此<code>top:1em</code>是使盒模型从顶部移开1em——也就是说，下移。负数则会使盒模型向相反的方向移动，因此<code>bottom:-1em</code>与<code>top:1em</code>效果相同。
可以得出另一个结论：同时为同一个元素指定<code>top</code>属性和<code>bottom</code>属性（或<code>left</code>和<code>right</code>属性）没有意义的。CSS规范规定了如果已经指定了<code>top</code>的话，<code>bottom</code>就会失效。<code>direction</code>属性控制着盒模型的横向移动。在从左到右的条件下，如果同时指定<code>left</code>和<code>right</code>的话，<code>right</code>就会失效；而在从右到左的条件下，<code>left</code>会失效。

让我知道，如果top为1em, 那盒模型就是上往下移动1em，而不是向上移动。而left就是从左向右的移动。right就是从右向左的移动，bottom就是由下向上的移动。由于top是从上到下地移动，而bottom是从下到上地移动，所以同时设置它们两个是没什么意义的，left和right都一样。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7</wp:post_id>
		<wp:post_date>2011-12-19 23:52:46</wp:post_date>
		<wp:post_date_gmt>2011-12-19 15:52:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>html%e7%9a%84position</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324832862]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>1</wp:comment_id>
		<wp:comment_author><![CDATA[minix]]></wp:comment_author>
		<wp:comment_author_email>mgtuiw@163.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>14.145.120.160</wp:comment_author_IP>
		<wp:comment_date>2012-01-15 13:07:49</wp:comment_date>
		<wp:comment_date_gmt>2012-01-15 05:07:49</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[haha]]></wp:comment_content>
		<wp:comment_approved>trash</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>quota  </title>
		<link>http://mgtuiw.blogcn.com/archives/3</link>
		<pubDate>Mon, 19 Dec 2011 15:57:23 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[system]]></category>

		<category domain="category" nicename="system"><![CDATA[system]]></category>

		<guid isPermaLink="false">http://mgtuiw.blogcn.com/?p=3</guid>
		<description></description>
		<content:encoded><![CDATA[今天学到了一个用法：quota的用法。

quota — 磁盘配额的限制。

quota是要先开启才能使用的。它是限制用户使用的多大的空间，超出限额就无法再使用了。目前我的笔记本还没开quota，不过今天在公司搞了一 下，到现在还是有一点记忆的，以下的信息都是靠记忆写出来的。

quota [-uvsl] [username]
quota [-gvsl] [groupname]
参数：
-u ：后面可以接 username ，表示显示出该使用者磁盘限额的限制值。若不接 username，表示显示出执行者磁盘限额的限制值。
-g ：后面可接 groupname ，表示显示出该组的 quota 限制值。
-v ：显示每个 filesystem磁盘限额的值；
-s ：可选择以inode或磁盘容量的限制值来显示；
-l ：仅显示出目前本机上面的filesystem磁盘限额的值。

如quota -uvs 显示当前用户磁盘限额的值

quota -uvs user 显示user磁盘限额的值

修改用户磁盘配额

使用edquota

我对这个命令的理解是使用ed(ed是一个文件编辑器)来编辑quota（磁盘限额），简称edquota.

#edquota –输入后会看到一些内容：下面是内容的解释：

filesystem：代表这个 quota 是针对哪一个分区（如/dev/sda1)的意思。
blocks：这个是目前使用者在这个filesystem，所耗掉的磁盘容量！单位是Mbytes！这个信息是 quota 程序自己计算出来的，所以不要修改他！
soft 与 hard ：当soft与hard数值为 0 的时候，表示没有限制！当显示是一些数字，证明这个数据是用户使用磁盘block的最大容量。
inodes：是目前使用掉 inode 的状态，也是 quota 自己计算出来而得到的。最好别修改。当soft与hard数值为 0 的时候，表示没有限制！当显示是一些数字，证明这个数据是用户使用磁盘inode的最大容量。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3</wp:post_id>
		<wp:post_date>2011-12-19 23:57:23</wp:post_date>
		<wp:post_date_gmt>2011-12-19 15:57:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%88%91%e7%9a%84n900</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1324889944]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>获取一个随机数</title>
		<link>http://mgtuiw.blogcn.com/archives/58</link>
		<pubDate>Mon, 26 Dec 2011 09:10:22 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[system]]></category>

		<category domain="category" nicename="system"><![CDATA[system]]></category>

		<guid isPermaLink="false">http://mgtuiw.blogcn.com/?p=58</guid>
		<description></description>
		<content:encoded><![CDATA[原由是一个updatehost文件造成的!FreeBSD在脚本里无法运行$RANDOM,在提示符下却可以正常运行.
然后就知道有/dev/urandom这么一个设备.它能产生随机的字节.
再然后就看到一个用法,很适合用于创建随机的密码,现将它的写法记录下来,以备以后有用:

<code style="color: green; font-size: 1.2em;">&lt; /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c8</code>

就是随机产生8位_A-Z-a-z-0-9的数据.

如果在运行的时候出现了 <span style="color: #ff0000;">tr: Illegal byte sequence</span> 的错误信息的话,那就是在这行代码中加入一些内容,

<code style="color: green; font-size: 1.2em;">&lt; /dev/urandom LC_CTYPE=C tr -dc _A-Z-a-z-0-9 | head -c8</code>

原因就是:<a href="http://nerdbynature.de/s9y/?176">http://nerdbynature.de/s9y/?176</a> 中的
<blockquote>$ cat /tmp/foo
ÿs
$ tr -d \r &lt; /tmp/foo
tr: Illegal byte sequence

Whoops? Let's take a closer look:

$ od -x /tmp/foo
0000000      73ff    0a0d
0000004

So, it's some <a href="http://en.wikipedia.org/wiki/Metal_umlaut">unicode character </a>(0xff), a small "s" (0x74), then a <a href="http://en.wikipedia.org/wiki/Carriage_return">CR </a>(0x0d, which I'm trying to remove) and a newline (0x0a) at the end. Turns out it's how<a href="http://discussions.apple.com/message.jspa?messageID=7691249#7691249"> MacOS 10.6 handles unicode characters</a>. Specifying a different locale seems to help:

$ LC_CTYPE=C tr -d \r &lt; /tmp/foo
ÿs</blockquote>
再废话一下上面那段代码，给自己作一个记录。

tr -dc _-a-z-A-Z-0-9是将/dev/urandom输出的内容替换成"_ or a..z or A..Z or 0..9这些字符，如果单是使用&lt; /dev/urandom会输出很多我们无法看到或看不到的内容，使用tr将它转换成我们容易看得懂的字符真的挺好的。

然后通过管道将这些内容传到head里，让head限制这些内容只输出头12个字符就可以了，其它的都扔掉吧！

附一段&lt; /dev/urandom LC_CTYPE=C tr -dc _@-#-a-z-A-Z-0-9 的输出信息：
<code style="color:green;">J*0&L.;M[G4RaX?T3$9CDU(Y:,G(GHY7OE./QGN]IY,KZ4Q1+&'$B5:-,(4^>Tz#ET5[('%?0'9O?;NHRH'(%$2@:YT<?IXY2X[@^XUzI\0aYSZZz3(.a)J,0,OC$RA>2=JT@z;__@3C8R.OR^>OGaLEX35*[31XJ)E4++#M=aKLPDYIJL`D(D-R&N3J]H;5/C(QD;C@6SR@U7]\%<16a:aEI.aRB9[V(aA+^]%R$VM1ZF7aTB98_6UYWM1[z]BEY_+':M]`.G;IF*WTM^5JPz^(&JJ69\@WM#N4F__LKBF'^0VC%O4?RI/A%.%2\^8YE'9Z4`1&]*XE1$\&`X##;69X@[GIU'P;5Y1J<AIY/L5%)TXz*'0-<M<@,JG<ZE,I'-R7UW]L2*_SMV65>P3(/T5\.R0&O,7^LGF\'<$OMC<H*5FE7JZLNR?aP)$R5JA>^T&>S$N&VW7QK7CXS+,W@(JCOJL',;#N\42a/R7'&1*3%+$4$&`37)$^W-P>/:^[@]+O6B\GT73\`51PNU&@-OLaA$G^\BF^@J'DH-_B.O2`8_Z[@Y>.Z5E@R^+?/#J_DVLV@K3G%MK:\74/Y9Y`1^5.I>I^K4(86L]PTK[DVDGz9%:E2WL.$>5<AW6a>SO<@>R*\5+X7?M$8_%AD;Y8$Z0[:>=W'19Z<2BK=+WP$@S2%IBGN4AJ<I4`H1D_+`$'J-4P<'E[VLZY7MKZWG`Z.VV4`TLU6E,6Q>3)*3F8^+'4Q?>z2AU2-H@HD2ANN\DY*Z0M<0)a8(J49CTX(3M_DLOI?V4KH>E:*U8U9R(GIQC@2a;E<A'$5,I-;?/)F7P$9<*`2=-RNaX\H?%)C1<9/8?T;^AW*FYT`D')[_/<H2JDCY##+JOL7_:SBCGIQ.KzO<E\z0L_^SK[3ZJ2N%GJ]W)7Ca$.L1C$S+E>E5D6>(Y+%H*X4\R>O-CP]WI6;[KSK$<.a:F5_,^]?O%(#9'%KWE*#8E3+G]-I>ON]aC;;H/9%E0)'$ZT]3E`24X@>-%+zR#;K,\(4(a.\S/1#zYNS_-`\5EWW4H9]+5^RX\835;7aNIL,X3'^EPBPK<M*@G+I&V$N^=/-RIGR,>YW9;R@]=:R7.$JE=1'&3\8zDK&_->@S@%%N(?6K^+J@U5*JI@U$M`]81['YXTENTV#6LWZ28.X4A6(D;%a\DZ]^$3((SP(-DHaU#7R[;*U3,+Z]BAW9,3VzG:3z4%I_%F5O3GY@+PQ4$?GLLE^Y;/(_48GBY9:UMORU7NE-'P$+#'Z@.[V,6J%,S/EBMOV0[8z6>z<E[]MN+_F('3=a1FAH+H==`FWW4$G#@8?C]LG&MV_+NaLG=5,QI.L,1ZUHR=^\C1XORCP:[Y7)<P-&,*]R_]UT<TBCN?99@32GKQ?'`a491?B7)J=<)Z.#H+7?FT65`CLI09X0UC0KUF8S;:GVGICH]`+PTK1DQRE]FI4$@:?#4NNX+<?O$?)[(0[SaJ>DH0J``KZJ<`.^P-'U-'I=+)%M*2=5Q-Q/=QX\a$aZ,DX'Q%\Q7YOT]zKZ:K;[.`B7]Y9>SXIY%?<F=^U&47/<3<&4Q@/aS=IOR>;%$RLY7C&<@0+D:&?M*9JDG&<AX@6TVPL&1W@(5?Y]',$Z@.=zz8($MY+]F>XRX6I&&1aPZBYP?#P\JFNIU)aT6-JYIV]`DOI9zZ.z6OBB`'M4Q+CzW`Z/SM,GBL`D?C'>4XP4K(\_9[QzVDG_(70$ZaAN9F7Mz)0>W</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>58</wp:post_id>
		<wp:post_date>2011-12-26 17:10:22</wp:post_date>
		<wp:post_date_gmt>2011-12-26 09:10:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e8%8e%b7%e5%8f%96%e4%b8%80%e4%b8%aa%e9%9a%8f%e6%9c%ba%e6%95%b0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1326906046]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>使用google</title>
		<link>http://mgtuiw.blogcn.com/archives/60</link>
		<pubDate>Tue, 27 Dec 2011 15:04:12 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[google]]></category>

		<category domain="category" nicename="google"><![CDATA[google]]></category>

		<guid isPermaLink="false">http://mgtuiw.blogcn.com/?p=60</guid>
		<description></description>
		<content:encoded><![CDATA[原文来自于“<a href="http://jiaren.org/2009/03/10/google-search-skills/">http://jiaren.org/2009/03/10/google-search-skills/</a>”

1. 更加全面地用Google搜索的最好方式是点击高级搜索。

2. 它可以让你搜索更加精准的词组，“所有词组”或者是适当的搜索框里输入词组的某一个特定关键词。

3. 在高级搜索里你依然可以自定义在一张页面上展示多少个搜索结果，你所寻找的信息语言和文件格式。

4. “搜索以下网站或网域”可以让你通过输入一个顶级域名（如.co.uk）来限定搜索结果。

5. 你也可以点击“日期、使用权限、数字范围和更多”的链接以获取更高级的功能。（Google中文直接分条在页面展示。）

6. 保存设置，这些高级功能大多也可以在Google首页的搜索框中通过命令行参数来实现

7. Google的主要搜索可以无形地用布尔结构“AND”来结合。你当输入smoke fire – 它表示寻找smoke AND fire.

8. 要让Google搜索Smoke 或者fire，只需要输入smoke OR fire.

9. 你也可以用 | 来代替OR。如：smoke | fire.

10. 像AND 和 OR 这样的布尔结构对大小写非常敏感。他们必须是全部大写。

11. 搜索专有名词，然后输入用括号括住的一个或者几个关键词。比如water (smoke OR fire)

12. 寻找短语，可以把它们放在引号里。比如：”there’s no smoke without fire”。

13. 同义搜索来寻找那些类似的信息，只须在你的关键词臆加一根波浪线，比如：~eggplant.

14. 用减号来排除关键词，如：new pram -ebay 可以让搜索结果排除来自Ebay的婴儿车信息。

15. 像 I, and, then ,if 这类普通词语是要被Google 忽略的。他们被称作停滞词语。

16. 而加号却可以让这些停滞词语给包含进来，比如：fish +and chips.

17. 如果一个停滞词语被包含在那些作为短语的引用标记中间的句子中时，这些词语是被Google允许的。

18. 你也可以要求Google进行简省搜索，试一下：Christopher Columbus discovered *

19. 用数字范围功能来搜索数字范围。例如：搜索价位在300英到500英磅之间的索尼电视可以用以下字串：Sony TV ￡300..￡500。

20. 通过高级搜索Google认可13种主要文件格式，其中包括Office, Lotus, PostScript, Shockwave Flash 和text。

21. 搜索这些文件只需直接使用修饰符 filetype:[文件扩展名]。例如：soccer filetype:pdf.

22. 要排除整个文件格式，只需使用以前我们排除关键词时使用的相同布尔句法：橄榄球 -filetype:doc

23. 事实上，只要你的语法正确，你可以混合使用任何布尔搜索运算符。举个例子便是：”sausage and mash” -onions filetype:doc

24. Google也有很多功能强大却隐藏着的搜索参数，例如“intitle” 仅仅只会搜索网页标题（titles）.你可以用这个例子试一试：intitle:网页设计

25. 如果你只是寻找文件而不是网页，只需用index of 代替intitle:参数。它可以帮助你寻找网络和FTP目录。

26. inurl这个修饰语只会搜索网页的网址，不妨用这个例子试一试 inurl:spices

27. 通过 inurl:vien/view.shtml 你可以找到在线的网络摄像头。

28. inanchor这个修饰语非常特别，它仅仅只会寻找那些作为超链接的文本。

29. 想知道有多少链接指向一个网站。可以试试这个语法：link:网址 – 比如link:www.mozilla.org

30. 同样的，你也可以通过 related:修饰语来找到Google认为相似的内容。比如: related:www.microsoft.com

31. info:site_name 这个修饰语可以返回关于某特定页面的信息。

32. 同样的，在普通搜索后点击”相似网页”可以链接到Google认为相似的页面结果。

33. 如果只想搜索某一个风址里的内容，可能用site: 来实现，比如说search tips site:www.techradar.com.

34. 上述技巧通过像www.dmoz.org这样的目录网站并动态地生成网址。

35. 也可直接进入Google Directory这样的人工挑选出来的数量有限的数据库网站，网址是www.direcory.google.com。

36. intitle和inurl这样的布尔运算符像OR一样在Google Directory中同样适用。

37. 当你用Google图片搜索时，用site:的修饰语可以只搜索某一个网站内的图片，比如 dvd recorder site:www.amazon.co.uk。

38. 同样的，用”site:.com”只会返回带有.com域名后缀网站里的结果。

39. Google新闻（news.google.com）有他自己的布尔运算符。例如“intext” 只会从一条新闻的主体内容里查询结果。

40. 在Google新闻里如果你用“source:”这个运算符，你可以得到特定的新闻存档。比如：heather mills source:daily_mail

41. 通过”location:”过滤器你可以等到特定国家的新闻，比如 location:uk

42. 同样的Google博客搜索（blogsearch.google.com）也有它自己的句法。你可以搜索某篇日志的标题，比如 “inblogtitle:”

43. Google的普通搜索也可以确实也可以得到精确的结果，不如用”movie:” 来寻找电影评论。

44. “film:”修饰语效果也一样。

45. 在搜索框里输入上映时间，Google会提示你提交你的邮编，然后Google就会告诉你什么时候什么地方将会有好戏上演。

46. 如果想要一个专门的电影搜索页面，可以去www.google.co.uk/movies

47. 如果你圈选了“记住地点”后，下次你查询电影放映时间只需要输入电影名字就够了。

48. Google确实在电影方面的搜索上下了些功夫。比如在搜索框中输入“director:”你将得到什么结果？你肯定猜到了吧。

49. 如果想得到演员名单，如需输入“cast:name_of_film”

50. 在乐队名、歌曲名或者专辑名前加上“music:”可以得到相关的音乐信息和评论。

<ins><ins id="aswift_1_anchor"></ins></ins>

51. 如果你在搜索框里输入“weather London”便可以得到伦敦最近四天完整的天气预报。

52. Google也内置了词典，在搜索框里用”define:the_word”试试。

53. Goolge保存了网站过去的内容。你可以直接搜索某个页面在Google服务器里的缓存，相关句法是“keyword cache:site_url”

54. 相应的，直接在搜索框里输入“cache:site_url”可以直接进入缓存页面。

55. 如果你手边没有计算器，只要记住Google同样内置了这么一个功能。输入“12*15”然后点击搜索试试。

56. Google的内置计算器不但可以转换尺寸还可以理解自然语言。搜索一下“14 stones in kilos”

57. 汇率转换也同样适用，试试“200 pounds in euros”

58. 如果你知道某货币的代码，将得到更加可靠的结果，例如”200 GBR in EUR”

59. 温度呢？Google也没有放过，输入“98 f to c”便可以把华氏转换为摄氏。

60. 想知道Google到底有多聪明呢？输入“2476 in roman numerals”然后点击“搜索”就知道了。

61. 你也可以保存你的Google使用习惯偏好，只需要在www.google.com/account上注册一个帐号便可。

62. 一旦有了Google帐号，不旦可以免费获得一个Gmail帐号，最主要的是可以畅通无阻地遨游于Google的世界。

63. 登陆你的Google帐户，通过“iGoogle”你还可以个性化你的Google主页。

64. 在“iGoogle”上点击”Add a Tab”来添加多个内容模块，Google会根据你添加的甩有模块来自适应整个页面。

65. “iGoogle”允许你为主页更换模板，点击”Select Theme”便可改变现有的默认主题。

66. 有一些”iGoogle”主题会随着时间的改变而改变，比如”Sweet Dreams”就是一个随着白天到夜晚的更迭而改变的一款主题。

67. 点击”Try something new” 下面的”More” 就可以看到一个更加完整的Google网站列表和一些新的功能。

68. “Custom Search”帮助你为你自己的网站建立一个Google牌的搜索引擎。

69. 另外，那张列表还忘掉了一个很有用的服务“Personalised Search”，不过你可以通过访问www.google.com/psearch来使用它。（一个保存你搜索记录的服务——译者注）

70. 这个页面列出了你最近的搜索，并按特定分类来区分他们，点击”pause” 就可以阻止Google记录你的搜索历史。

71. 点击”Trends”可以看到你最访问的网站，你最搜索最多的条目以及最常点击的链接。

72. 个性化搜索同样包括了一个书签服务，它帮助你在线保存书签并可以在任何地方获取他们。

73. 更方便的是，你可以在”iGoogle”上添加一个书签模块来添加或访问它们。

74. 你知道你还可以搜索Google返回的结果么？滑到搜索结果页面底部便可以找到那链接。

75. 在你的查询后面附加你的邮编便可以搜索本地信息。

76. 找地图？只需要在搜索关键词后面多写一个”map”，比如“Leeds map”

77. Google搜索图片（这里指直接在Google首页而不是Google Map页面，译者注）非常简单，只要你在关键词后而多写个“image”，你就会在搜索结果的顶部看到相关的图片结果。

78. 神奇的是Google图片搜索可以识别人脸，在浏览器地址栏搜索结果页面网址后面添加“&amp;imgtype=face” 确定后Google会过滤掉所有不是人的图片。

79. 想关注股市行情？只需要在”stock:”后面填上公司的股票代码便可以得到从Google财经返回的结果。

80. 在Google的搜索框中输入航空公司或者航班号可以获得相关的航班信息。

81. 现在几点了？在地点前面加上“time”可以得到任务地方的时间。

82. 你也许已经注意到了在输入关键词时Google会交替提示你的拼写，那内置的拼写检查在起作用。

83. 你可以在关键词前加上”spell:”来直接调用Google的拼写检查功能。

84. 点击”I’m Feeling Lucky” （手气不错）可以直接访问关键词搜索第一个结果的网页。

85. 输入基于统计的查询关键词，比如population of Britain，在结果顶部Google会告诉你它的答案。

86. 如果你看到的搜索有非英文结果，点击”Translate this Page” 可以看到由Google帮你翻译的英文内容。

87. 你也可以搜索国外网站的内容，点击语言工具，然后选择你想要Google帮你翻译查询的国家。

88. 语言工具的另一个特色是可以帮你翻译一些可自由剪贴的文本字块。

89. 这里也有一个区域，你可以直接输入网址，并让Google翻译成你想要的语言。

90. 在“语言工具”链接上面你可以看到一个“使用偏好”的链接，这是一个包含了一些私密设置的页面。

91. 你可以明确地告诉Google你希望返回结果的语言，可根据你的喜好进行多选。

92. Google的安全搜索可以保护你免受色情内容的侵犯。你可以选择性的让过滤系统更加严格或者把它完全地关闭。

93. 在使用偏好里，你可以改变Google搜索单页显示结果的结果数，默认为10.

94. 你也可以设置为在新窗口打开Google的搜索结果。

95. 想知道他人在搜索的内容或者提高你自己网站的Pagerank值（Google自行开发的网页质量等级排名评估算法，Pagerank值越高的网页在搜索结果里越靠前，译者注）？去www.google.com/zeitgeist看看。

96. 另一个强大的实验性功能可以在www.google.com/trends找到，你可以知道哪些是热门搜索条目。

97. 在Google趋势搜索框里输入以逗号间隔的多个关键词，可以对比他们的搜索表现。

98. 想用克林贡语搜索？去www.google.com/intl/xx-klingon就可以了。

99. 也许你提线木偶里的瑞典厨师是你的榜样？点击www.google.com/intl/xx-bork看看。

100. 在搜索框里输入“answer to life, the universe and everything”，你肯定会被结果吓一跳。

101. Google还可以告诉你独角兽有多少只角,输入“number of horns on a unicorn”看看。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>60</wp:post_id>
		<wp:post_date>2011-12-27 23:04:12</wp:post_date>
		<wp:post_date_gmt>2011-12-27 15:04:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%bd%bf%e7%94%a8google</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1325039362]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>github部署Octopress的艰难过程</title>
		<link>http://mgtuiw.blogcn.com/archives/62</link>
		<pubDate>Fri, 30 Dec 2011 09:51:20 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[blog]]></category>

		<category domain="category" nicename="blog"><![CDATA[blog]]></category>

		<guid isPermaLink="false">http://mgtuiw.blogcn.com/?p=62</guid>
		<description></description>
		<content:encoded><![CDATA[一直想要一个blog，不过又没钱买VPS．目前在使用blogcn．最近看到一文章写到可以在github上架建blog,使用的是Octopress．
在网上搜索了一下：
<a href="http://lyhdev.com/note:octopress">http://lyhdev.com/note:octopress</a>
<a href="http://www.yangzhiping.com/tech/octopress.html">http://www.yangzhiping.com/tech/octopress.html</a>
等等都有可以写怎样架建它．
不过我的架建过程并像上面链接里说的那么顺利！
上面的过程大概是:
<code style="color:green;">1 在github创建一个个人账号，然后用 "自己账号.github.com"来创建一个仓库．-- 我使用的是 minix.githut.com　作仓库．
在本机上操作：
2 git clone git://github.com/imathis/octopress.git octopress
3 cd octopress
4 gem install bundler
5 bundle install
6 rake install
7 rake setup_github_pages
8 rake generate
9 rake deploy
</code>
当我在创建１，也是就创建一个仓库的时候，就出现了问题
　创建了minix.github.com点击Admin按钮进来管理界面，正常情况下会出现　
＂<code style="color:red;">GitHub Pages
GitHub Pages is the simplest way to setup an HTML site for your project. </code>＂
,而我的却没有这个选项．
我的解决方法是: 先创建一个minix仓库(也就是将后面的github.com去了)，这里会出现上面的选项的．选择后一会右上角的雷达会提示收到一封信，是提示你已为minix创建了github page,也就是可以直接通过域名访问那种．然后将仓库重命名为minix.github.com，一会你又会收到一封信，提示是已为minix.github.com创建了github page了,github page会默认地放到gh_pages分支里.
在一直往下走的时候，又出现了一个问题，在第7步"rake setup_github_pages" 运行它的时候会提示你输入你的仓库的地址,我的是git@github.com:minix/minix.github.com.git,
.当运行到第9步"rake deploy",github会创建一个新的分支master,然后将代码放到master分支里面去.在浏览器上输入minix.github.com,它默认会去读gh-pages分支里面的index.html,然后显示,而我很笨,无法将github设置到读取master分支里的index.html然后输出.
而我的解决方法是:直接修改octopress目录里面Rakefile里面的内容，
将11行的"deploy_default = "rsync"中的rsync修改为 push, 将14行的deploy = "master"中的master修改为gh-pages, 将305行的 "branch = (repo_url.match(/\/[\w-]+.github.com/).nil?) ? 'gh-pages' : 'master'" 修改为branch = 'gh-pages'
还要改一个地方就是　octopress/_deploy/.git/refs/heads 目录，你会发现里面会有一个master,这里要将它改为gh-pages就可以了
有一个我不懂的地方是,为什么 repo_url.match(/\/[\w-]+.github.com/).nil? 得到的结果却是false ?
这个问题是因为运行了 rake setup_github_pages 得到的.不过又不能不运行.不运行rake deploy 不会将代码上传到github上面的 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>62</wp:post_id>
		<wp:post_date>2011-12-30 17:51:20</wp:post_date>
		<wp:post_date_gmt>2011-12-30 09:51:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>github%e9%83%a8%e7%bd%b2octopress%e7%9a%84%e8%89%b0%e9%9a%be%e8%bf%87%e7%a8%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1325238682]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>mac出现kCGErrorInvalidConnection: CGSSetHotKeyEnabled: Invalid connection</title>
		<link>http://mgtuiw.blogcn.com/archives/61</link>
		<pubDate>Mon, 02 Jan 2012 15:06:09 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[未分类]]></category>

		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e7%b1%bb"><![CDATA[未分类]]></category>

		<guid isPermaLink="false">http://mgtuiw.blogcn.com/?p=61</guid>
		<description></description>
		<content:encoded><![CDATA[最近mac总是卡死，于是用console.app查了一下，发现了大量的
kCGErrorInvalidConnection: CGSSetHotKeyEnabled: Invalid connection，
于是上网查了下，看到了一个解决方法是：
defaults write com.apple.dashboard mcx-disabled -boolean true
而解除上面代码的命令行是：
defaults delete com.apple.dashboard mcx-disabled

具体是什么原因，还要再查！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>61</wp:post_id>
		<wp:post_date>2012-01-02 23:06:09</wp:post_date>
		<wp:post_date_gmt>2012-01-02 15:06:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mac%e5%87%ba%e7%8e%b0kcgerrorinvalidconnection-cgssethotkeyenabled-invalid-connection</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1325516773]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
		<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
		<wp:meta_value><![CDATA[1325516839]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>mac出现: kCGErrorInvalidConnection: CGSSetHotKeyEnabled: Invalid connection</title>
		<link>http://mgtuiw.blogcn.com/archives/64</link>
		<pubDate>Mon, 02 Jan 2012 15:41:20 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[mac]]></category>

		<category domain="category" nicename="mac"><![CDATA[mac]]></category>

		<guid isPermaLink="false">http://mgtuiw.blogcn.com/?p=64</guid>
		<description></description>
		<content:encoded><![CDATA[因为之前出现过几次忽然卡机，然后需要关机重开才行，于是今天就用console.app来查看一下日志，发现MAC里面出现了很多的
<code style="color:red;"><Error>: kCGErrorInvalidConnection: CGSSetHotKeyEnabled: Invalid connection</code>
解决的方法是：
<code style="color:green;">rm $HOME/Library/Preferences/com.apple.symbolichotkeys.plist</code>

这个解决方法的地址在<a href="https://discussionsjapan.apple.com/thread/10093824?start=30&tstart=0">https://discussionsjapan.apple.com/thread/10093824?start=30&tstart=0</a>
可惜不懂日语啊，不知道为什么会出现这个错误信息]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>64</wp:post_id>
		<wp:post_date>2012-01-02 23:41:20</wp:post_date>
		<wp:post_date_gmt>2012-01-02 15:41:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mac%e5%87%ba%e7%8e%b0-kcgerrorinvalidconnection-cgssethotkeyenabled-invalid-connection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1325519171]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>FreeBSD sed直接修改文件</title>
		<link>http://mgtuiw.blogcn.com/archives/66</link>
		<pubDate>Thu, 12 Jan 2012 10:01:29 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[FreeBSD]]></category>

		<category domain="category" nicename="freebsd"><![CDATA[FreeBSD]]></category>

		<guid isPermaLink="false">http://mgtuiw.blogcn.com/?p=66</guid>
		<description></description>
		<content:encoded><![CDATA[我想修改/etc/ttys里面的内容,想将35到40行中的on修改为off,当使用
<span style="color: #008000;"><code>sed -i '35,40 s/on/off/g' /etc/ttys</code></span>
会提示
<span style="color: #ff0000;">sed: 1: "/etc/ttys": undefined label 'tys'</span>
google了一下,发现在
<a href="http://forums.freebsd.org/showthread.php?t=12235">http://forums.freebsd.org/showthread.php?t=12235</a>
按照里面讲的,那替换要写成下面的形式才行:<br />
<code style="color:green;">sed -i "" '35,40 s/on/off/g' /etc/ttys</code><br />
原因是, 在FreeBSD中,sed的i参数后面要加一个东西,这东西是用于对要编辑的文件的一个备份. 如<br />
<code style="color:green;">sed -i <em>".backup"</em> '35,40 s/on/off/g' /etc/ttys</code><br />
是将/etc/ttys进行复制, 复制成/etc/ttys.backup, 然后再对/etc/ttys进行编辑. -i 参数再加的是文件的后缀,没必要连原文件名也写进去]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>66</wp:post_id>
		<wp:post_date>2012-01-12 18:01:29</wp:post_date>
		<wp:post_date_gmt>2012-01-12 10:01:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>freebsd-sed%e7%9b%b4%e6%8e%a5%e4%bf%ae%e6%94%b9%e6%96%87%e4%bb%b6</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1326765196]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Here Document</title>
		<link>http://mgtuiw.blogcn.com/archives/67</link>
		<pubDate>Fri, 13 Jan 2012 04:45:23 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[system]]></category>

		<category domain="category" nicename="system"><![CDATA[system]]></category>

		<guid isPermaLink="false">http://mgtuiw.blogcn.com/?p=67</guid>
		<description></description>
		<content:encoded><![CDATA[原来,Here Document也就是经常使用到的EOF 里面的内容是可以运行得的.

如果你想EOF里面的内容完成的输出,那就使用<span style="color: #ff0000;"><strong>'</strong></span>EOF<strong><span style="color: #ff0000;">'</span></strong>吧.原因是

<em> 在here document的开头引用或转义"limit string"会使得here document的消息体中的参数替换被禁用.</em>

例:
<code>cat &gt; /etc/motd &lt;&lt; EOF
,        ,
/(        )`
\ \___   / |
/- _  `-/  '
(/\/ \ \   /\
/ /   | `    \
O O   ) /    |
`-^--'`&lt;     '
(_.)  _  )   /
`.___/`    /
`-----' /
&lt;----.     __ / __   \
&lt;----|====O)))==) \) /====
&lt;----'    `--' `.__,' \
|        |
\       /       /\
______( (_  / \______/
,'  ,-----'   |
`--{__________)<code>
会报错</code></code>

<code><code> </code></code>

<code><code>当使用到
<code>cat &gt; /etc/motd &lt;&lt; <strong><span style="color: #ff0000;">'</span></strong>EOF<strong><span style="color: #ff0000;">'</span></strong>
,        ,
/(        )`
\ \___   / |
/- _  `-/  '
(/\/ \ \   /\
/ /   | `    \
O O   ) /    |
`-^--'`&lt;     '
(_.)  _  )   /
`.___/`    /
`-----' /
&lt;----.     __ / __   \
&lt;----|====O)))==) \) /====
&lt;----'    `--' `.__,' \
|        |
\       /       /\
______( (_  / \______/
,'  ,-----'   |
`--{__________)</code></code></code>
就会正常了,不信的话就试试吧.

详细内容,可参阅<a href="http://www.linuxsir.org/main/doc/abs/abs3.7cnhtm/here-docs.html" target="_blank">http://www.linuxsir.org/main/doc/abs/abs3.7cnhtm/here-docs.html</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>67</wp:post_id>
		<wp:post_date>2012-01-13 12:45:23</wp:post_date>
		<wp:post_date_gmt>2012-01-13 04:45:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>here-document</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1326430181]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>[转载]SED单行脚本快速参考</title>
		<link>http://mgtuiw.blogcn.com/archives/69</link>
		<pubDate>Fri, 13 Jan 2012 06:04:27 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[system]]></category>

		<category domain="category" nicename="system"><![CDATA[system]]></category>

		<guid isPermaLink="false">http://mgtuiw.blogcn.com/?p=69</guid>
		<description></description>
		<content:encoded><![CDATA[转载于: <a href="http://sed.sourceforge.net/sed1line_zh-CN.html" target="_blank">http://sed.sourceforge.net/sed1line_zh-CN.html</a>
-------------------------------------------------------------------------
SED单行脚本快速参考（Unix 流编辑器）                       2005年12月29日

英文标题：USEFUL ONE-LINE SCRIPTS FOR SED (Unix stream editor)
原标题：HANDY ONE-LINERS FOR SED (Unix stream editor)

整理：Eric Pement  - 电邮：pemente[at]northpark[dot]edu         版本5.5
译者：Joe Hong     - 电邮：hq00e[at]126[dot]com

在以下地址可找到本文档的最新（英文）版本：
<a href="http://sed.sourceforge.net/sed1line.txt">http://sed.sourceforge.net/sed1line.txt</a>
<a href="http://www.pement.org/sed/sed1line.txt">http://www.pement.org/sed/sed1line.txt</a>

其他语言版本：
中文          - <a href="http://sed.sourceforge.net/sed1line_zh-CN.html">http://sed.sourceforge.net/sed1line_zh-CN.html</a>
捷克语        - <a href="http://sed.sourceforge.net/sed1line_cz.html">http://sed.sourceforge.net/sed1line_cz.html</a>
荷语          - <a href="http://sed.sourceforge.net/sed1line_nl.html">http://sed.sourceforge.net/sed1line_nl.html</a>
法语          - <a href="http://sed.sourceforge.net/sed1line_fr.html">http://sed.sourceforge.net/sed1line_fr.html</a>
德语          - <a href="http://sed.sourceforge.net/sed1line_de.html">http://sed.sourceforge.net/sed1line_de.html</a>

葡语          - <a href="http://sed.sourceforge.net/sed1line_pt-BR.html">http://sed.sourceforge.net/sed1line_pt-BR.html</a>

文本间隔：
--------

# 在每一行后面增加一空行
<code> sed G</code>

# 将原来的所有空行删除并在每一行后面增加一空行。
# 这样在输出的文本中每一行后面将有且只有一空行。
<code>sed '/^$/d;G'</code>

# 在每一行后面增加两行空行
<code> sed 'G;G'</code>

# 将第一个脚本所产生的所有空行删除（即删除所有偶数行）
<code> sed 'n;d'</code>

# 在匹配式样“regex”的行之前插入一空行
<code>sed '/regex/{x;p;x;}'</code>

# 在匹配式样“regex”的行之后插入一空行
<code> sed '/regex/G'</code>

# 在匹配式样“regex”的行之前和之后各插入一空行
<code>sed '/regex/{x;p;x;G;}'</code>

编号：
--------

# 为文件中的每一行进行编号（简单的左对齐方式）。这里使用了“制表符”
# （tab，见本文末尾关于'\t'的用法的描述）而不是空格来对齐边缘。
<code>sed = filename | sed 'N;s/\n/\t/'</code>

# 对文件中的所有行编号（行号在左，文字右端对齐）。
<code> sed = filename | sed 'N; s/^/     /; s/ *\(.\{6,\}\)\n/\1  /'</code>

# 对文件中的所有行编号，但只显示非空白行的行号。
<code>sed '/./=' filename | sed '/./N; s/\n/ /'</code>

# 计算行数 （模拟 "wc -l"）
<code>sed -n '$='</code>

文本转换和替代：
--------

# Unix环境：转换DOS的新行符（CR/LF）为Unix格式。
<code> sed 's/.$//'                     # 假设所有行以CR/LF结束
sed 's/^M$//'                    # 在bash/tcsh中，将按Ctrl-M改为按Ctrl-V
sed 's/\x0D$//'                  # ssed、gsed 3.02.80，及更高版本</code>

# Unix环境：转换Unix的新行符（LF）为DOS格式。
<code> sed "s/$/`echo -e \\\r`/"        # 在ksh下所使用的命令
sed 's/$'"/`echo \\\r`/"         # 在bash下所使用的命令
sed "s/$/`echo \\\r`/"           # 在zsh下所使用的命令
sed 's/$/\r/'                    # gsed 3.02.80 及更高版本</code>

# DOS环境：转换Unix新行符（LF）为DOS格式。
<code> sed "s/$//"                      # 方法 1
sed -n p                         # 方法 2</code>

# DOS环境：转换DOS新行符（CR/LF）为Unix格式。
# 下面的脚本只对UnxUtils sed 4.0.7 及更高版本有效。要识别UnxUtils版本的
#  sed可以通过其特有的“--text”选项。你可以使用帮助选项（“--help”）看
# 其中有无一个“--text”项以此来判断所使用的是否是UnxUtils版本。其它DOS
# 版本的的sed则无法进行这一转换。但可以用“tr”来实现这一转换。
<code> sed "s/\r//" infile &gt;outfile     # UnxUtils sed v4.0.7 或更高版本
tr -d \r &lt;infile &gt;outfile        # GNU tr 1.22 或更高版本</code>

# 将每一行前导的“空白字符”（空格，制表符）删除
# 使之左对齐
<code> sed 's/^[ \t]*//'                # 见本文末尾关于'\t'用法的描述</code>

# 将每一行拖尾的“空白字符”（空格，制表符）删除
<code> sed 's/[ \t]*$//'                # 见本文末尾关于'\t'用法的描述</code>

# 将每一行中的前导和拖尾的空白字符删除
<code> sed 's/^[ \t]*//;s/[ \t]*$//'</code>

# 在每一行开头处插入5个空格（使全文向右移动5个字符的位置）
<code> sed 's/^/     /'</code>

# 以79个字符为宽度，将所有文本右对齐
<code>sed -e :a -e 's/^.\{1,78\}$/ &amp;/;ta'  # 78个字符外加最后的一个空格</code>

# 以79个字符为宽度，使所有文本居中。在方法1中，为了让文本居中每一行的前
# 头和后头都填充了空格。 在方法2中，在居中文本的过程中只在文本的前面填充
# 空格，并且最终这些空格将有一半会被删除。此外每一行的后头并未填充空格。
<code> sed  -e :a -e 's/^.\{1,77\}$/ &amp; /;ta'                     # 方法1
sed  -e :a -e 's/^.\{1,77\}$/ &amp;/;ta' -e 's/\( *\)\1/\1/'  # 方法2</code>

# 在每一行中查找字串“foo”，并将找到的“foo”替换为“bar”
<code> sed 's/foo/bar/'                 # 只替换每一行中的第一个“foo”字串
sed 's/foo/bar/4'                # 只替换每一行中的第四个“foo”字串
sed 's/foo/bar/g'                # 将每一行中的所有“foo”都换成“bar”
sed 's/\(.*\)foo\(.*foo\)/\1bar\2/' # 替换倒数第二个“foo”
sed 's/\(.*\)foo/\1bar/'            # 替换最后一个“foo”</code>

# 只在行中出现字串“baz”的情况下将“foo”替换成“bar”
<code> sed '/baz/s/foo/bar/g'</code>

# 将“foo”替换成“bar”，并且只在行中未出现字串“baz”的情况下替换
<code> sed '/baz/!s/foo/bar/g'</code>

# 不管是“scarlet”“ruby”还是“puce”，一律换成“red”
<code> sed 's/scarlet/red/g;s/ruby/red/g;s/puce/red/g'  #对多数的sed都有效
gsed 's/scarlet\|ruby\|puce/red/g'               # 只对GNU sed有效</code>

# 倒置所有行，第一行成为最后一行，依次类推（模拟“tac”）。
# 由于某些原因，使用下面命令时HHsed v1.5会将文件中的空行删除
<code> sed '1!G;h;$!d'               # 方法1
sed -n '1!G;h;$p'             # 方法2</code>

# 将行中的字符逆序排列，第一个字成为最后一字，……（模拟“rev”）
<code> sed '/\n/!G;s/\(.\)\(.*\n\)/&amp;\2\1/;//D;s/.//'</code>

# 将每两行连接成一行（类似“paste”）
<code> sed '$!N;s/\n/ /'</code>

# 如果当前行以反斜杠“\”结束，则将下一行并到当前行末尾
# 并去掉原来行尾的反斜杠
<code> sed -e :a -e '/\\$/N; s/\\\n//; ta'</code>

# 如果当前行以等号开头，将当前行并到上一行末尾
# 并以单个空格代替原来行头的“=”
<code> sed -e :a -e '$!N;s/\n=/ /;ta' -e 'P;D'</code>

# 为数字字串增加逗号分隔符号，将“1234567”改为“1,234,567”
<code> gsed ':a;s/\B[0-9]\{3\}\&gt;/,&amp;/;ta'                     # GNU sed
sed -e :a -e 's/\(.*[0-9]\)\([0-9]\{3\}\)/\1,\2/;ta'  # 其他sed
</code>
# 为带有小数点和负号的数值增加逗号分隔符（GNU sed）
<code> gsed -r ':a;s/(^|[^0-9.])([0-9]+)([0-9]{3})/\1\2,\3/g;ta'</code>

# 在每5行后增加一空白行 （在第5，10，15，20，等行后增加一空白行）
<code> gsed '0~5G'                      # 只对GNU sed有效
sed 'n;n;n;n;G;'                 # 其他sed</code>

选择性地显示特定行：
--------

# 显示文件中的前10行 （模拟“head”的行为）
<code>sed 10q1</code>

# 显示文件中的第一行 （模拟“head -1”命令）
<code>sed q1</code>

# 显示文件中的最后10行 （模拟“tail”）
<code>sed -e :a -e '$q;N;11,$D;ba'1</code>

# 显示文件中的最后2行（模拟“tail -2”命令）
<code>sed '$!N;$!D'1</code>

# 显示文件中的最后一行（模拟“tail -1”）
<code>sed '$!d'                        # 方法11</code>
<code>sed -n '$p'                      # 方法21</code>

# 显示文件中的倒数第二行
<code>sed -e '$!{h;d;}' -e x              # 当文件中只有一行时，输入空行1</code>
<code>sed -e '1{$q;}' -e '$!{h;d;}' -e x  # 当文件中只有一行时，显示该行1</code>
<code>sed -e '1{$d;}' -e '$!{h;d;}' -e x  # 当文件中只有一行时，不输出1</code>

# 只显示匹配正则表达式的行（模拟“grep”）
<code>sed -n '/regexp/p'               # 方法11</code>
<code>sed '/regexp/!d'                 # 方法21</code>

# 只显示“不”匹配正则表达式的行（模拟“grep -v”）
<code>sed -n '/regexp/!p'              # 方法1，与前面的命令相对应1</code>
<code>sed '/regexp/d'                  # 方法2，类似的语法1</code>

# 查找“regexp”并将匹配行的上一行显示出来，但并不显示匹配行
<code>sed -n '/regexp/{g;1!p;};h'1</code>

# 查找“regexp”并将匹配行的下一行显示出来，但并不显示匹配行
<code>sed -n '/regexp/{n;p;}'1</code>

# 显示包含“regexp”的行及其前后行，并在第一行之前加上“regexp”所
# 在行的行号 （类似“grep -A1 -B1”）
<code>sed -n -e '/regexp/{=;x;1!p;g;$!N;p;D;}' -e h1</code>

# 显示包含“AAA”、“BBB”或“CCC”的行（任意次序）
<code>sed '/AAA/!d; /BBB/!d; /CCC/!d'  # 字串的次序不影响结果1</code>

# 显示包含“AAA”、“BBB”和“CCC”的行（固定次序）
<code>sed '/AAA.*BBB.*CCC/!d'1</code>

# 显示包含“AAA”“BBB”或“CCC”的行 （模拟“egrep”）
<code>sed -e '/AAA/b' -e '/BBB/b' -e '/CCC/b' -e d    # 多数sed1</code>
<code>gsed '/AAA\|BBB\|CCC/!d'                        # 对GNU sed有效1</code>

# 显示包含“AAA”的段落 （段落间以空行分隔）
# HHsed v1.5 必须在“x;”后加入“G;”，接下来的3个脚本都是这样
<code>sed -e '/./{H;$!d;}' -e 'x;/AAA/!d;'1</code>

# 显示包含“AAA”“BBB”和“CCC”三个字串的段落 （任意次序）
<code>sed -e '/./{H;$!d;}' -e 'x;/AAA/!d;/BBB/!d;/CCC/!d'1</code>

# 显示包含“AAA”、“BBB”、“CCC”三者中任一字串的段落 （任意次序）
<code>sed -e '/./{H;$!d;}' -e 'x;/AAA/b' -e '/BBB/b' -e '/CCC/b' -e d1</code>
<code>gsed '/./{H;$!d;};x;/AAA\|BBB\|CCC/b;d'         # 只对GNU sed有效1</code>

# 显示包含65个或以上字符的行
<code>sed -n '/^.\{65\}/p'1</code>

# 显示包含65个以下字符的行
<code>sed -n '/^.\{65\}/!p'            # 方法1，与上面的脚本相对应1</code>
<code>sed '/^.\{65\}/d'                # 方法2，更简便一点的方法1</code>

# 显示部分文本——从包含正则表达式的行开始到最后一行结束
<code>sed -n '/regexp/,$p'1</code>

# 显示部分文本——指定行号范围（从第8至第12行，含8和12行）
<code>sed -n '8,12p'                   # 方法11</code>
<code>sed '8,12!d'                     # 方法21</code>

# 显示第52行
<code>sed -n '52p'                     # 方法11</code>
<code>sed '52!d'                       # 方法21</code>
<code>sed '52q;d'                      # 方法3, 处理大文件时更有效率1</code>

# 从第3行开始，每7行显示一次
<code>gsed -n '3~7p'                   # 只对GNU sed有效1</code>
<code>sed -n '3,${p;n;n;n;n;n;n;}'     # 其他sed1</code>

# 显示两个正则表达式之间的文本（包含）
<code>sed -n '/Iowa/,/Montana/p'       # 区分大小写方式1</code>

选择性地删除特定行：
--------

# 显示通篇文档，除了两个正则表达式之间的内容
<code>sed '/Iowa/,/Montana/d'1</code>

# 删除文件中相邻的重复行（模拟“uniq”）
# 只保留重复行中的第一行，其他行删除
<code>sed '$!N; /^\(.*\)\n\1$/!P; D'1</code>

# 删除文件中的重复行，不管有无相邻。注意hold space所能支持的缓存
# 大小，或者使用GNU sed。
<code>sed -n 'G; s/\n/&amp;&amp;/; /^\([ -~]*\n\).*\n\1/d; s/\n//; h; P'1</code>

# 删除除重复行外的所有行（模拟“uniq -d”）
<code>sed '$!N; s/^\(.*\)\n\1$/\1/; t; D'1</code>

# 删除文件中开头的10行
<code>sed '1,10d'1</code>

# 删除文件中的最后一行
<code>sed '$d'1</code>

# 删除文件中的最后两行
<code>sed 'N;$!P;$!D;$d'1</code>

# 删除文件中的最后10行
<code>sed -e :a -e '$d;N;2,10ba' -e 'P;D'   # 方法11</code>
<code>sed -n -e :a -e '1,10!{P;N;D;};N;ba'  # 方法21</code>

# 删除8的倍数行
<code>gsed '0~8d'                           # 只对GNU sed有效1</code>
<code>sed 'n;n;n;n;n;n;n;d;'                # 其他sed1</code>

# 删除匹配式样的行
<code>sed '/pattern/d'                      # 删除含pattern的行。当然pattern1</code>
# 可以换成任何有效的正则表达式

# 删除文件中的所有空行（与“grep '.' ”效果相同）
<code>sed '/^$/d'                           # 方法11</code>
<code>sed '/./!d'                           # 方法21</code>

# 只保留多个相邻空行的第一行。并且删除文件顶部和尾部的空行。
# （模拟“cat -s”）
<code>sed '/./,/^$/!d'        #方法1，删除文件顶部的空行，允许尾部保留一空行1</code>
<code>sed '/^$/N;/\n$/D'      #方法2，允许顶部保留一空行，尾部不留空行1</code>

# 只保留多个相邻空行的前两行。
<code>sed '/^$/N;/\n$/N;//D'1</code>

# 删除文件顶部的所有空行
<code>sed '/./,$!d'1</code>

# 删除文件尾部的所有空行
<code>sed -e :a -e '/^\n*$/{$d;N;ba' -e '}'  # 对所有sed有效1</code>
<code>sed -e :a -e '/^\n*$/N;/\n$/ba'        # 同上，但只对 gsed 3.02.*有效1</code>

# 删除每个段落的最后一行
<code>sed -n '/^$/{p;h;};/./{x;/./p;}'1</code>

特殊应用：
--------

# 移除手册页（man page）中的nroff标记。在Unix System V或bash shell下使
# 用'echo'命令时可能需要加上 -e 选项。
<code>sed "s/.`echo \\\b`//g"    # 外层的双括号是必须的（Unix环境）1</code>
<code>sed 's/.^H//g'             # 在bash或tcsh中, 按 Ctrl-V 再按 Ctrl-H1</code>
<code>sed 's/.\x08//g'           # sed 1.5，GNU sed，ssed所使用的十六进制的表示方法1</code>

# 提取新闻组或 e-mail 的邮件头
<code>sed '/^$/q'                # 删除第一行空行后的所有内容1</code>

# 提取新闻组或 e-mail 的正文部分
<code>sed '1,/^$/d'              # 删除第一行空行之前的所有内容1</code>

# 从邮件头提取“Subject”（标题栏字段），并移除开头的“Subject:”字样
<code>sed '/^Subject: */!d; s///;q'1</code>

# 从邮件头获得回复地址
<code>sed '/^Reply-To:/q; /^From:/h; /./d;g;q'1</code>

# 获取邮件地址。在上一个脚本所产生的那一行邮件头的基础上进一步的将非电邮
# 地址的部分剃除。（见上一脚本）
<code>sed 's/ *(.*)//; s/&gt;.*//; s/.*[:&lt;] *//'1</code>

# 在每一行开头加上一个尖括号和空格（引用信息）
<code>sed 's/^/&gt; /'1</code>

# 将每一行开头处的尖括号和空格删除（解除引用）
<code>sed 's/^&gt; //'1</code>

# 移除大部分的HTML标签（包括跨行标签）
<code>sed -e :a -e 's/&lt;[^&gt;]*&gt;//g;/&lt;/N;//ba'1</code>

# 将分成多卷的uuencode文件解码。移除文件头信息，只保留uuencode编码部分。
# 文件必须以特定顺序传给sed。下面第一种版本的脚本可以直接在命令行下输入；
# 第二种版本则可以放入一个带执行权限的shell脚本中。（由Rahul Dhesi的一
# 个脚本修改而来。）
<code>sed '/^end/,/^begin/d' file1 file2 ... fileX | uudecode   # vers. 11</code>
<code>sed '/^end/,/^begin/d' "$@" | uudecode                    # vers. 21</code>

# 将文件中的段落以字母顺序排序。段落间以（一行或多行）空行分隔。GNU sed使用
# 字元“\v”来表示垂直制表符，这里用它来作为换行符的占位符——当然你也可以
# 用其他未在文件中使用的字符来代替它。
<code>sed '/./{H;d;};x;s/\n/={NL}=/g' file | sort | sed '1s/={NL}=//;s/={NL}=/\n/g'1</code>
<code>gsed '/./{H;d};x;y/\n/\v/' file | sort | sed '1s/\v//;y/\v/\n/'1</code>

# 分别压缩每个.TXT文件，压缩后删除原来的文件并将压缩后的.ZIP文件
# 命名为与原来相同的名字（只是扩展名不同）。（DOS环境：“dir /b”
# 显示不带路径的文件名）。
<code>echo @echo off &gt;zipup.bat1</code>
<code>dir /b *.txt | sed "s/^\(.*\)\.TXT/pkzip -mo \1 \1.TXT/" &gt;&gt;zipup.bat1</code>

使用SED：Sed接受一个或多个编辑命令，并且每读入一行后就依次应用这些命令。
当读入第一行输入后，sed对其应用所有的命令，然后将结果输出。接着再读入第二
行输入，对其应用所有的命令……并重复这个过程。上一个例子中sed由标准输入设
备（即命令解释器，通常是以管道输入的形式）获得输入。在命令行给出一个或多
个文件名作为参数时，这些文件取代标准输入设备成为sed的输入。sed的输出将被
送到标准输出（显示器）。因此：

cat filename | sed '10q'         # 使用管道输入
<code>sed '10q' filename               # 同样效果，但不使用管道输入1</code>
<code>sed '10q' filename &gt; newfile     # 将输出转移（重定向）到磁盘上1</code>

要了解sed命令的使用说明，包括如何通过脚本文件（而非从命令行）来使用这些命
令，请参阅《sed &amp; awk》第二版，作者Dale Dougherty和Arnold Robbins
（O'Reilly，1997；http://www.ora.com），《UNIX Text Processing》，作者
Dale Dougherty和Tim O'Reilly（Hayden Books，1987）或者是Mike Arst写的教
程——压缩包的名称是“U-SEDIT2.ZIP”（在许多站点上都找得到）。要发掘sed
的潜力，则必须对“正则表达式”有足够的理解。正则表达式的资料可以看
《Mastering Regular Expressions》作者Jeffrey Friedl（O'reilly 1997）。
Unix系统所提供的手册页（“man”）也会有所帮助（试一下这些命令
“man sed”、“man regexp”，或者看“man ed”中关于正则表达式的部分），但
手册提供的信息比较“抽象”——这也是它一直为人所诟病的。不过，它本来就不
是用来教初学者如何使用sed或正则表达式的教材，而只是为那些熟悉这些工具的人
提供的一些文本参考。

括号语法：前面的例子对sed命令基本上都使用单引号（'...'）而非双引号
（"..."）这是因为sed通常是在Unix平台上使用。单引号下，Unix的shell（命令
解释器）不会对美元符（$）和后引号（`...`）进行解释和执行。而在双引号下
美元符会被展开为变量或参数的值，后引号中的命令被执行并以输出的结果代替
后引号中的内容。而在“csh”及其衍生的shell中使用感叹号（!）时需要在其前
面加上转义用的反斜杠（就像这样：\!）以保证上面所使用的例子能正常运行
（包括使用单引号的情况下）。DOS版本的Sed则一律使用双引号（"..."）而不是
引号来圈起命令。

'\t'的用法：为了使本文保持行文简洁，我们在脚本中使用'\t'来表示一个制表
符。但是现在大部分版本的sed还不能识别'\t'的简写方式，因此当在命令行中为
脚本输入制表符时，你应该直接按TAB键来输入制表符而不是输入'\t'。下列的工
具软件都支持'\t'做为一个正则表达式的字元来表示制表符：awk、perl、HHsed、
<code>sedmod以及GNU sed v3.02.80。1</code>

不同版本的SED：不同的版本间的sed会有些不同之处，可以想象它们之间在语法上
会有差异。具体而言，它们中大部分不支持在编辑命令中间使用标签（:name）或分
支命令（b,t），除非是放在那些的末尾。这篇文档中我们尽量选用了可移植性较高
的语法，以使大多数版本的sed的用户都能使用这些脚本。不过GNU版本的sed允许使
用更简洁的语法。想像一下当读者看到一个很长的命令时的心情：

<code>sed -e '/AAA/b' -e '/BBB/b' -e '/CCC/b' -e d1</code>

好消息是GNU sed能让命令更紧凑：

<code>sed '/AAA/b;/BBB/b;/CCC/b;d'      # 甚至可以写成1</code>
<code>sed '/AAA\|BBB\|CCC/b;d'1</code>

此外，请注意虽然许多版本的sed接受象“/one/ s/RE1/RE2/”这种在's'前带有空
格的命令，但这些版本中有些却不接受这样的命令:“/one/! s/RE1/RE2/”。这时
只需要把中间的空格去掉就行了。

速度优化：当由于某种原因（比如输入文件较大、处理器或硬盘较慢等）需要提高
命令执行速度时，可以考虑在替换命令（“s/.../.../”）前面加上地址表达式来
提高速度。举例来说：

<code>sed 's/foo/bar/g' filename         # 标准替换命令1</code>
<code>sed '/foo/ s/foo/bar/g' filename   # 速度更快1</code>
<code>sed '/foo/ s//bar/g' filename      # 简写形式1</code>

当只需要显示文件的前面的部分或需要删除后面的内容时，可以在脚本中使用“q”
命令（退出命令）。在处理大的文件时，这会节省大量时间。因此：

<code>sed -n '45,50p' filename           # 显示第45到50行1</code>
<code>sed -n '51q;45,50p' filename       # 一样，但快得多1</code>

如果你有其他的单行脚本想与大家分享或者你发现了本文档中错误的地方，请发电
子邮件给本文档的作者（Eric Pement）。邮件中请记得提供你所使用的sed版本、
该sed所运行的操作系统及对问题的适当描述。本文所指的单行脚本指命令行的长
度在65个字符或65个以下的sed脚本〔译注1〕。本文档的各种脚本是由以下所列作
者所写或提供：

Al Aab                               # 建立了“seders”邮件列表
Edgar Allen                          # 许多方面
Yiorgos Adamopoulos                  # 许多方面
Dale Dougherty                       # 《sed &amp; awk》作者
Carlos Duarte                        # 《do it with sed》作者
Eric Pement                          # 本文档的作者
Ken Pizzini                          # GNU sed v3.02 的作者
S.G. Ravenhall                       # 去html标签脚本
Greg Ubben                           # 有诸多贡献并提供了许多帮助
-------------------------------------------------------------------------

译注1：大部分情况下，sed脚本无论多长都能写成单行的形式（通过`-e'选项和`;'
号）——只要命令解释器支持，所以这里说的单行脚本除了能写成一行还对长度有
所限制。因为这些单行脚本的意义不在于它们是以单行的形式出现。而是让用户能
方便地在命令行中使用这些紧凑的脚本才是其意义所在。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>69</wp:post_id>
		<wp:post_date>2012-01-13 14:04:27</wp:post_date>
		<wp:post_date_gmt>2012-01-13 06:04:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e8%bd%ac%e8%bd%bdsed%e5%8d%95%e8%a1%8c%e8%84%9a%e6%9c%ac%e5%bf%ab%e9%80%9f%e5%8f%82%e8%80%83</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1326905895]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>FreeBSD使用加密后密码增加用户 </title>
		<link>http://mgtuiw.blogcn.com/archives/71</link>
		<pubDate>Fri, 13 Jan 2012 09:13:21 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[FreeBSD]]></category>

		<category domain="category" nicename="freebsd"><![CDATA[FreeBSD]]></category>

		<guid isPermaLink="false">http://mgtuiw.blogcn.com/?p=71</guid>
		<description></description>
		<content:encoded><![CDATA[在linux下,可以使用
<code style="color: green;">usermod -p '加密后的密码字符串' user</code>
来给用户增加密码.
在FreeBSD,也是可以使用加密后的密码字条串来增加密码,使用的命令是chpass
<code style="color: green;">chpass -p ''加密后的密码字符串' user</code>

前提是用户已经存在.我使用的是pw
<code style="color: green;">pw adduser user -g wheel -d /home/user</code>
来增加用户.

有一问题是,使用什么程序可以将密码加密成密码字符串呢?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>71</wp:post_id>
		<wp:post_date>2012-01-13 17:13:21</wp:post_date>
		<wp:post_date_gmt>2012-01-13 09:13:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>freebsd%e4%bd%bf%e7%94%a8%e5%8a%a0%e5%af%86%e5%90%8e%e5%af%86%e7%a0%81%e5%a2%9e%e5%8a%a0%e7%94%a8%e6%88%b7</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1328601797]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Archives</title>
		<link>http://mgtuiw.blogcn.com/archive</link>
		<pubDate>Sun, 15 Jan 2012 04:20:47 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<guid isPermaLink="false">http://mgtuiw.blogcn.com</guid>
		<description></description>
		<content:encoded><![CDATA[<!--wp_archives-->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>75</wp:post_id>
		<wp:post_date>2012-01-15 12:20:47</wp:post_date>
		<wp:post_date_gmt>2012-01-15 04:20:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>archive</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1326603611]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_page_template</wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
		<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
		<wp:meta_value><![CDATA[1326603662]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Home</title>
		<link>http://mgtuiw.blogcn.com/home</link>
		<pubDate>Sun, 15 Jan 2012 04:59:02 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<guid isPermaLink="false">http://mgtuiw.blogcn.com</guid>
		<description></description>
		<content:encoded><![CDATA[<!--wp-index-->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>77</wp:post_id>
		<wp:post_date>2012-01-15 12:59:02</wp:post_date>
		<wp:post_date_gmt>2012-01-15 04:59:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>home</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1326603543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
		<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
		<wp:meta_value><![CDATA[1326603583]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>归档</title>
		<link>http://mgtuiw.blogcn.com/%e5%bd%92%e6%a1%a3</link>
		<pubDate>Sun, 15 Jan 2012 05:01:34 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<guid isPermaLink="false">http://mgtuiw.blogcn.com</guid>
		<description></description>
		<content:encoded><![CDATA[<!--wp_archives-->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>78</wp:post_id>
		<wp:post_date>2012-01-15 13:01:34</wp:post_date>
		<wp:post_date_gmt>2012-01-15 05:01:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>%e5%bd%92%e6%a1%a3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1326603694]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>rm和unlink的不同</title>
		<link>http://mgtuiw.blogcn.com/archives/79</link>
		<pubDate>Tue, 17 Jan 2012 04:40:41 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[system]]></category>

		<category domain="category" nicename="system"><![CDATA[system]]></category>

		<guid isPermaLink="false">http://mgtuiw.blogcn.com/?p=79</guid>
		<description></description>
		<content:encoded><![CDATA[使用strace可以看出rm和unlink到底有什么不同
<strong>% strace rm test.txt</strong>
<code style="color:green;">execve("/bin/rm", ["rm", "aa.txt"], [/* 23 vars */]) = 0
uname({sys="Linux", node="haha.com", ...}) = 0
brk(0)                                  = 0x509000
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2b72e64c0000
access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)
open("/etc/ld.so.cache", O_RDONLY)      = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=116297, ...}) = 0
mmap(NULL, 116297, PROT_READ, MAP_PRIVATE, 3, 0) = 0x2b72e64c1000
close(3)                                = 0
open("/lib64/tls/libc.so.6", O_RDONLY)  = 3
read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0\240\304"..., 832) = 832
fstat(3, {st_mode=S_IFREG|0755, st_size=1493409, ...}) = 0
mmap(0x33a7600000, 2310088, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x33a7600000
mprotect(0x33a772b000, 1085384, PROT_NONE) = 0
mmap(0x33a782b000, 20480, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x12b000) = 0x33a782b000
mmap(0x33a7830000, 16328, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x33a7830000
close(3)                                = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2b72e64de000
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2b72e64df000
mprotect(0x33a782b000, 8192, PROT_READ) = 0
arch_prctl(ARCH_SET_FS, 0x2b72e64deb00) = 0
munmap(0x2b72e64c1000, 116297)          = 0
brk(0)                                  = 0x509000
brk(0x52a000)                           = 0x52a000
ioctl(0, SNDCTL_TMR_TIMEBASE or TCGETS, {B38400 opost isig icanon echo ...}) = 0
lstat("aa.txt", {st_mode=S_IFREG|0664, st_size=2277, ...}) = 0
access("aa.txt", W_OK)                  = 0
unlink("aa.txt")                        = 0
exit_group(0)                           = ?
Process 7493 detached</code>

<strong>% strace unlink test2.txt</strong>
<code style="color:green;">execve("/bin/unlink", ["unlink", "abc.txt"], [/* 23 vars */]) = 0
uname({sys="Linux", node="FS67.56.COM", ...}) = 0
brk(0)                                  = 0x504000
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2b8845d3d000
access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)
open("/etc/ld.so.cache", O_RDONLY)      = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=116297, ...}) = 0
mmap(NULL, 116297, PROT_READ, MAP_PRIVATE, 3, 0) = 0x2b8845d3e000
close(3)                                = 0
open("/lib64/tls/libc.so.6", O_RDONLY)  = 3
read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0\240\304"..., 832) = 832
fstat(3, {st_mode=S_IFREG|0755, st_size=1493409, ...}) = 0
mmap(0x33a7600000, 2310088, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x33a7600000
mprotect(0x33a772b000, 1085384, PROT_NONE) = 0
mmap(0x33a782b000, 20480, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x12b000) = 0x33a782b000
mmap(0x33a7830000, 16328, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x33a7830000
close(3)                                = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2b8845d5b000
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2b8845d5c000
mprotect(0x33a782b000, 8192, PROT_READ) = 0
arch_prctl(ARCH_SET_FS, 0x2b8845d5bb00) = 0
munmap(0x2b8845d3e000, 116297)          = 0
brk(0)                                  = 0x504000
brk(0x525000)                           = 0x525000
unlink("abc.txt")                       = 0
exit_group(0)                           = ?
Process 7497 detached</code>

很明显地,在strace里看到rm的操作比unlink多了下面几步:
<span style="color: #008000;">ioctl(0, SNDCTL_TMR_TIMEBASE or TCGETS, {B38400 opost isig icanon echo ...}) = 0
lstat("aa.txt", {st_mode=S_IFREG|0664, st_size=2277, ...}) = 0
access("aa.txt", W_OK)                  = 0
unlink("aa.txt")                        = 0</span>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>79</wp:post_id>
		<wp:post_date>2012-01-17 12:40:41</wp:post_date>
		<wp:post_date_gmt>2012-01-17 04:40:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>rm%e5%92%8cunlink%e7%9a%84%e4%b8%8d%e5%90%8c</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1326905846]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>更改文件名</title>
		<link>http://mgtuiw.blogcn.com/archives/81</link>
		<pubDate>Mon, 06 Feb 2012 10:05:40 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[FreeBSD]]></category>

		<category domain="category" nicename="freebsd"><![CDATA[FreeBSD]]></category>

		<guid isPermaLink="false">http://mgtuiw.blogcn.com/?p=81</guid>
		<description></description>
		<content:encoded><![CDATA[文件名如下:
<code>/home/minix/mu/00 - Biggest Part Of Me.flac
/home/minix/mu/01 - Biggest Part Of Me.flac
/home/minix/mu/02 - Biggest Part Of Me.flac
/home/minix/mu/03 - Biggest Part Of Me.flac
/home/minix/mu/04 - Biggest Part Of Me.flac
/home/minix/mu/05 - Biggest Part Of Me.flac
/home/minix/mu/06 - Biggest Part Of Me.flac
/home/minix/mu/07 - Biggest Part Of Me.flac
/home/minix/mu/08 - Biggest Part Of Me.flac
/home/minix/mu/09 - Biggest Part Of Me.flac
/home/minix/mu/10 - Biggest Part Of Me.flac</code>

现在要将<strong>/home/minix/mu/00-10 -</strong>去了,只留下Biggest Part Of Me.flac,我的办法是:
<code style="color: green;">sed -i aaa 's:/home/minix/mu/\([0-9]\{2\}\ -\ \)\(.*\.flac$\):\2:g' test</code>
问题是这些文件都重定向到一个文件(现在是test文件), 怎样才能直接修改文件名呢?那还得考虑.
下面的一CU网友出给的修改文件名的代码：
<code style="color:green;">find /home/minix/mu -type -f -regex "[0-9]\{2\}\ -\ .*\.flac$" | sed -n "s/^[0-9]\+\s-\s\(.*\)/mv \"&\" \"\1\"/e"</code>
这段代码使用了e子命令,这样可以在sed使用shell命令,不过在Mac和FreeBSD中都没法使用到e子命令,会提示"<strong>bad flag in substitute command: 'e'</strong>".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>81</wp:post_id>
		<wp:post_date>2012-02-06 18:05:40</wp:post_date>
		<wp:post_date_gmt>2012-02-06 10:05:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>%e6%9b%b4%e6%94%b9%e6%96%87%e4%bb%b6%e5%90%8d</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1328841336]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>shell中关于# %的用法</title>
		<link>http://mgtuiw.blogcn.com/archives/84</link>
		<pubDate>Fri, 10 Feb 2012 02:28:50 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[shell]]></category>

		<category domain="category" nicename="shell"><![CDATA[shell]]></category>

		<guid isPermaLink="false">http://mgtuiw.blogcn.com/?p=84</guid>
		<description></description>
		<content:encoded><![CDATA[在上篇文章 "<a href="http://mgtuiw.blogcn.com/archives/81">更改文件名</a>"中,一CU网友给出了一个答案
<code style="color:green;">    ls *.flac|while read file
    do
        echo mv "${file}" "${file#*-}";
    done </code>
很好奇<em>${file#*-}</em>字符串中<strong>#*-</strong>的作用,于是在网上看到一些内容是说明这些东西的:
来自 <a href="http://www.boobooke.com/bbs/thread-148390-1-1.html">http://www.boobooke.com/bbs/thread-148390-1-1.html</a>,内容如下:

<blockquote>关于# %的用法问题！今天就在这里说下吧！有些用到的也不是很多！自己之前在写一个脚本的时候用到过！
主要是就是#和%和:的一些特殊用法:
<strong>#         用在<em>变量名前面</em>可以达到统计字符个数的功能</strong>
tom@sexly:~$ a="www.google.com"
tom@sexly:~$ echo ${#a}
14

<strong>#         用在<em>变量之后</em>的时候可以达到截取字符的功能(只匹配一次)</strong>
tom@sexly:~$ a="www.google.com"
tom@sexly:~$ echo ${a#*\.}       这里截取.(第一个点)后面的所有内容
google.com

<strong>##      和单个#功能基本相同，但是他会匹配到最后</strong>
tom@sexly:~$ a="www.google.com"
tom@sexly:~$ echo ${a##*\.}       这里截取了最后一个点的内容
com

<strong>% 和%%   他们功能与#和##基本相同  最不过他们是截取的内容是相反的</strong>
tom@sexly:~$ a="www.google.com"
tom@sexly:~$ echo ${a%\.*}
www.google
tom@sexly:~$ a="www.google.com"
tom@sexly:~$ echo ${a%%\.*}
www

<strong>:(冒号)     其功能也是截取字符串</strong>
格式为 :起始[:长度]                   省略长度,系统默认截取到最后,起始从0开始
tom@sexly:~$ echo ${a:4}
google.com
tom@sexly:~$ echo ${a:4:6}
google</blockquote>

从上面可以看到,CU网友出给的答案<em>${file#*-}</em>的作用是截取 <strong>-</strong> 后面的内容.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>84</wp:post_id>
		<wp:post_date>2012-02-10 10:28:50</wp:post_date>
		<wp:post_date_gmt>2012-02-10 02:28:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>shell%e4%b8%ad%e5%85%b3%e4%ba%8e-%e7%9a%84%e7%94%a8%e6%b3%95</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1328861330]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>文件和目录的权限</title>
		<link>http://mgtuiw.blogcn.com/archives/85</link>
		<pubDate>Fri, 10 Feb 2012 08:51:19 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[system]]></category>

		<category domain="category" nicename="system"><![CDATA[system]]></category>

		<guid isPermaLink="false">http://mgtuiw.blogcn.com/?p=85</guid>
		<description></description>
		<content:encoded><![CDATA[普通文件的权限包含三个基本属性：读，写执行;显然，读和写权限允许用户从某个文件中读取数据，或向文件写入新的数据。如果用户有写权限，那么还可以将该文件当成一个程序或Shell脚本使用。用于描述这些权限的字符是r, w and x.

目录也使用这些相同的权限，但是意义不同。如果某个目录具有

<strong>读权限意味着用户可以查看该目录中有哪些文件。
写权限意味着用户可以在目录中增加，删除或重命名文件。
执行权限允许用户在访问某个目录中的文件时使用该目录的目录名。</strong>

假设用户有对某个目录的读权限，但是并没有该目录中文件的执行权限。那么用户仍可以阅读这个目录，或文件的索引节点信息。该信息是由stat系统调用返回的。即用户可以看到文件名，权限，文件大小，访问次数，所有者，所在的组和链接数目，但不能阅读文件的内容。

目录的写权限允许用户修改目录的内容。因为文件名被保存在目录而不是文件中，所以目录中的写权限就允许创建，重命名或删除文件。具体的说，如果有人对你的主目录有写权限，他就可以重命名或删除.login文件并且在该外插入一个新文件。那.login文件的权限对此并没有影响。即使不能阅读文件的内容，也可以重命名一个文件。

目录的执行权限有时也被称为搜索权限。如果用户发现某个目录提供了执行权限，但没有提供读权限，那也可以使用该目录中的任何文件，但是必须知道文件名，用户不能深入到目录中找出文件的名称。这类目录就如一个黑盒子，用户可以将文件名放入该目录，但能不能找得到文件就不一定了。

文件权限很容易理解，但目录+文件的权限要同时适当的话就有点复杂了！

通过以上可以让我知道，当创建目录的时候，特别是提供给WEB服务器使用的时候， 一定要注意权限的问题。目录的读，写和执行权限并不就代表目录里面的文件的读，写和执行权限。在用chmod来构建权限的时候要考虑到目录的权限的时候同时也要考虑到文件的权限，这样才是上好计策，而不是盲目的给目录一个777!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>85</wp:post_id>
		<wp:post_date>2012-02-10 16:51:19</wp:post_date>
		<wp:post_date_gmt>2012-02-10 08:51:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>%e6%96%87%e4%bb%b6%e5%92%8c%e7%9b%ae%e5%bd%95%e7%9a%84%e6%9d%83%e9%99%90</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1328863880]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>通过硬盘加速系统性能</title>
		<link>http://mgtuiw.blogcn.com/archives/86</link>
		<pubDate>Fri, 10 Feb 2012 08:53:41 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[system]]></category>

		<category domain="category" nicename="system"><![CDATA[system]]></category>

		<guid isPermaLink="false">http://mgtuiw.blogcn.com/?p=86</guid>
		<description></description>
		<content:encoded><![CDATA[今天在书上抄了一段关于通过硬盘加速系统性能的段落下来，放在电脑上怕重装系统后会把它给删了，想到放到这里会安全很多。

<blockquote>寻道的开销是影响硬盘驱动器性能的最重要因素。粗略估算一下，磁盘的旋转速度和与其相连的总线的速度的影响都相当小。现代的磁盘如果读取连续的扇区，每秒就能传送数十M字节的数据，但是它们每秒只能执行100到300次寻道。如果每次寻道只能传送一个扇区，你就能很容易发现该驱动器的吞吐量不足其峰值的5%。

  当示道使得磁头移动较大距离时，其所耗费的时间也较长。如果硬盘具有多个文件系统分区，而且从每个分区随机读取文件，则不同分区之间的切换将使磁头来回移动较长的距离。另一方面，一个分区内的文件则彼此相对靠近。在给一个新硬盘划分分区时，你可能需要考虑这些隐含的性能因素，而将需要同时访问的文件归入同一个文件系统中。

  为了真正获得最高的硬盘性能，你应该把一起使用的文件系统放置在不同的磁盘上。尽管这依赖于总线结构和调和设备的驱动程序。但大多数计算机能独立管理多个硬盘，这大大地增加了硬盘的吞吐量。例如，将web服务器的数据和web服务器的日志分置于不同的硬盘中就可以得益于此。

  如果你在许多硬盘。那么通过安装多个硬盘控制器或SCSI总线可进一步提高性能。这项技术的效果取决于系统的体系结构。你可以查看硬件文档或咨询你的供货商。

  由于换页会使整个系统变慢，因此如果可能，将交换空间散布在多个硬盘上则特别重要。通过使用swapon命令，swap命令或内核配置选项可以让所有系统支持这一配置。很多系统既能使用专用的交换分区也能使用格式化的文件系统中的某个交换文件。专用的交换分区效率更高：如果有其它的选择，则不要使用交换文件。

  有些系统还允许将/tmp设置为“基于内存的文件系统”，它在本质上与 PC RAM硬盘相同。它是一个特殊的驱动器，该驱动器看似硬盘但实际上却将数据存储在内存中。利用RAM硬盘可能会降低用于一般处理的平均内存量，但同时也会让临时文件的读写变得令人瞠目的快。这总体而言是个划得来的交易。

  在些软件由于延迟了基本操作从而降低了系统的性能。硬盘限额和CPU记账就是这方面的两个例子。磁盘限额要求在写文件及删除文件时更新硬盘使用情况的汇总。CPU记账功能则在每个进程结束时把数据记录写入记账文件中。硬盘的高速缓存在助于减轻这些功能的影响，但它们可能仍然对性能有显著的影响，除非你确实需要使用它们，否则不要启用它们。</blockquote>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>86</wp:post_id>
		<wp:post_date>2012-02-10 16:53:41</wp:post_date>
		<wp:post_date_gmt>2012-02-10 08:53:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>%e9%80%9a%e8%bf%87%e7%a1%ac%e7%9b%98%e5%8a%a0%e9%80%9f%e7%b3%bb%e7%bb%9f%e6%80%a7%e8%83%bd</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1328864023]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>更新dhclient.conf以防resolv.conf被改</title>
		<link>http://mgtuiw.blogcn.com/archives/87</link>
		<pubDate>Thu, 16 Feb 2012 06:16:12 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[FreeBSD]]></category>

		<category domain="category" nicename="freebsd"><![CDATA[FreeBSD]]></category>

		<guid isPermaLink="false">http://mgtuiw.blogcn.com/?p=87</guid>
		<description></description>
		<content:encoded><![CDATA[有时使用ssh登录FreeBSD时会很慢,为什么呢?
是因为ssh要进行"DNS反查(查询主机IP所对应的域名)",所以在登录时候会很慢.有两个方法可以解决:
<strong>1) 编辑 /etc/ssh/sshd_conf ， 将 #UseDNS yes 取消注释，设为no ，重启sshd
2) 编辑 /etc/resolv.conf(没有就新建),在里面写入DNS,如 nameserver 8.8.8.8.</strong>
使用2)的重启之后你会觉得第二个方法行不通,因为ssh登录还是很慢.这又为什么呢?
当再一次查看/etc/reslov.conf文件的时候就会发现,里面的内容不是你的内容.
你可以vim /sbin/dhclient-script文件的add_new_resolv_conf()函数时会发现:/etc/resolv.conf里面的内容是被替换的.
那解决的方法也是的,还不止一个,有二个!
<strong>1) 直接将 /sbin/dhclient-script文件的add_new_resolv_conf函数注释.
2) 在/etc/dhclient.conf文件里加上一句:</strong>
<em>prepend domain-name-servers  8.8.8.8, 8.8.4.4;</em>
man dhclient.conf里prepend小节的内容是
<blockquote>prepend { [option declaration] [, ... option declaration] }
             If for some set of options the client should use a value you sup‐
             ply, and then use the values supplied by the server, if any,
             these values can be defined in the prepend statement.  The
             prepend statement can only be used for options which allow more
             than one value to be given.  This restriction is not enforced -
             if violated, the results are unpredictable.</blockquote>
重启之后查看/etc/resolv.conf,会现在多了两行!
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>87</wp:post_id>
		<wp:post_date>2012-02-16 14:16:12</wp:post_date>
		<wp:post_date_gmt>2012-02-16 06:16:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>%e6%9b%b4%e6%96%b0dhclient-conf%e4%bb%a5%e9%98%b2resolv-conf%e8%a2%ab%e6%94%b9</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1329373165]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>ssh首次远程登录不用输入yes&#124;no</title>
		<link>http://mgtuiw.blogcn.com/archives/89</link>
		<pubDate>Tue, 21 Feb 2012 10:37:37 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[ssh]]></category>

		<category domain="category" nicename="ssh"><![CDATA[ssh]]></category>

		<guid isPermaLink="false">http://mgtuiw.blogcn.com/?p=89</guid>
		<description></description>
		<content:encoded><![CDATA[当首次远程登录的时候都得输入yes让.ssh/know_hosts记住主机.现在不用了,主要在$HOME/.ssh/config(没有文件就自己加上去)里加上一行即可:
<code style="color:green;">$ vim $HOME/.ssh/config 
StrictHostKeyChecking no</code>
同样的，hostkey也会写到$HOME/.ssh/know_hosts里面去的！

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>89</wp:post_id>
		<wp:post_date>2012-02-21 18:37:37</wp:post_date>
		<wp:post_date_gmt>2012-02-21 10:37:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>ssh%e9%a6%96%e6%ac%a1%e7%99%bb%e5%bd%95%e4%b8%8d%e7%94%a8%e8%be%93%e5%85%a5yesno</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1329836250]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>sed命令概要</title>
		<link>http://mgtuiw.blogcn.com/archives/90</link>
		<pubDate>Thu, 23 Feb 2012 16:50:39 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[sed]]></category>

		<category domain="category" nicename="sed"><![CDATA[sed]]></category>

		<guid isPermaLink="false">http://mgtuiw.blogcn.com/?p=90</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>下面的内容摘自于<<UNIX超级手册>></h2>
<h1>按字母顺序的sed命令概要：</h1>
<strong>#</strong>
在sed脚本中开始一个注释。如果第一个注释行确切为#n，说明sed设置了命令行选项 -n。

<strong>:</strong>  <em>:label</em>
给脚本中的一行加上标签，以便使用命令b或t进行转移控制。参数label最多可包含7个字符。

<strong>=</strong>  <em>[address] =</em>
把每一行的行号写到标准输出。

<strong>a</strong> <em>[address]a\
text</em>
在每一个匹配地址address的行后面添加文本text。如果文本test不止一行，那么除了最后一行以外，所有的换行符都必须在前面加一个反斜杠“隐藏”起来。如果不用这种方法隐藏起来，文本text就会在第一个换行符处结束。模式空间中的文本text是无效的，后续命令也不能作用于它。当全部编辑命令执行结束后，该命令的结果就会被发送到标准输出，而不管模式空间中当前行进行了什么操作。

例如：
<code style="color:green;">$a\
This goes after the last line in the file\
(marked by $). This text is escaped at the\
end of each line, except for the last one.</code>

<strong>b</strong> <em>[address1] [,address2]b[label]</em>
无条件地把控制转移到脚本中标有:label的其他地方。也就是说，label后面的命令就是用于当前行的下一个命令。如果没有指定参数label，控制就会直接跳到脚本的末尾，因此就没有其他的命令用于当前行了。
例子：
<code style="color:green;">#忽略tbl表； 继续执行TE后面的脚本：
/^\.TS/,/^\.TE/b</code>

<strong>c</strong>  <em>[address1] [,address2]c\
text</em>
用文本text替换地址所选择的行。如果指定了行的范围，那么所有的文本行会被作为一组被单个的text副本替换。除了最后一行以外，text中每行后面所跟的换行符都要用反斜杠来转义。实际上，模式空间中的内容都会被删除，任何后续命令都无法作用于它(或text).
例如：
<code style="color:green;">#替换一个文件中的前100行:
   1,100c\
   ...第一个替换行\
   ...第二个替换行\
   ...\
   ...最后一个替换行\</code>

<strong>d</strong>  <em>[address1] [,address]d</em>
  从模式空间中删除寻址到的行。因此，该行文本就不会被发送到标准输出。读取一行新的输入文本，再用无法脚本中的第一个命令恢复编辑。
例如：
  <code style="color:green;">#删除所有的空白行：
  /^$/d</code>

<strong>D</strong>  <em>[address1] [,address2]D</em>
  删除由命令N所创建的模式空间中多行文本的第一部分(一直到插入的换行符为止),并用脚本中的第一个命令恢复编辑。如果该命令清空了模式空间，那么就会读取一行新的输入，就像执行了命令d一样。
例子：
<code style="color:green;">#除去多个空白行，只留下一行：
/^$/{
   N
   /^\n$/D
}</code>

<strong>g</strong> <em>[address1] [,address2]g</em>
把保留空间中的内容粘贴到模式空间中，清除模式间中原来的内容。
下面的例子介绍了一种复制文本行的简章方法：
下面的脚本收集所有包含单词Item:的文本行，并把它们复制到文件后面标记出来的某个位置，并覆盖掉原来的文本。
<code style="color:green;">/Item:/H
/<Replace this line with the item list>/g</code>

<strong>G</strong>  <em>[address1] [,address2]G</em>
  与命令g的功能基本相同，但是保留空间中的内容会被粘贴到指定地址的后面，而不是将其覆盖掉。下面的例子介绍了一种“剪切并粘贴”文本行的简单方法。
例子：
<code style="color:green;">#下面的脚本收集所有包含单词Item:的文本行，并把它们移动到文件后面标记出来的某个位置，而包含单词Item:的原始文本行将被删除。
/Item:/{
  H
  d
}
/Summary of items:/G</code>

<strong>h</strong>  <em>[address1] [,address2]h</em>
把模式空间中的内容复制到保留空间中，它是一个特殊的临时缓冲区。保留空间中原来的内容将被删除。在编辑文本行之前，可以用命令h来保存该的内容。
例子：
<code style="color:green;">#编辑一行；显示出更改之处；重新显示原始文件
/UNIX/{
  h
  s/.* UNIX \(.*\) .*/\1:/
  p
  x
}</code>
<em>输入样例：
This describes the UNIX ls command.
This describes the UNIX cp command.
 输入样例：
ls：
This descibes the UNIX ls command.
cp:
this describes the UNIX cp command.</em>

<strong>H </strong> <em>[address1] [,address2]H</em>
把模式空间中的内容（以一个换行符开头）添加到保留空间的内容之后。即便保留空间为空，命令H也仍然会添加一个换行符。命令H类似于增量复制。可以参考命令g和G中所举的例子，

<strong>i</strong>  <em>[address]i\
   text</em>
在与地址address相匹配的每一行前插入文本text。
例子
<code style="color:green;">/Item l/i\
The five items are listed below:</code>

<strong>l</strong>  <strong>[address1] [,address2]l</strong>
列出模式空间中的内容，用ASCII码显示非打印字符。比较长的行会自动换行。

<strong>n</strong>  <em>[address1] [,address2]n</em>
把下一行输入读入模式空间中。当前行被发送到标准输出，下一行将成为当前行。控制将被转移给n后面所跟的命令，而不是回到脚本开始处。
例子：
<code style="color:green;">#在ms宏中，小节标题出现在宏.NH下面的文本行。如果要打印所有的标题文本行，可以用sed -n 调用下面的脚本：
/^\.NH/{
  n
  p
}</code>

<strong>N</strong>  <em>[address1] [,address2]N</em>
  把下一个输入行添加到模式空间的内容之后；这两行文本用一个插入的换行符分隔开。（该命令允许跨越两行进行模式匹配。）如果用\n来匹配插入的换行符，那么可以跨越多行进行模式匹配。
例子：
<code style="color:green;">#与上一个例子相类似，介是不但打印出标题，还打印出.NH行:
  /^\.NH/{
  N
  p
}
#把两行文本合并一起（即用空格代替换行符 ):
/^\.NH/{
   N
   S/\n/ /
   p
}</code>

<strong>p</strong>  <em>[address1] [,address2]p</em>
打印出寻址到的行。除非使用命令行选项-n，否则该命令会导致输出相同的行。另外，它常用于那些改变流控制的命令（如命令d，N和b）之前，并可能阻止输出当前行。请参考命令h，n和N中的例子。

<strong>P</strong> <em>[address1] [,adress2]P</em>
打印出由命令N创建的多行模式的第一部分（一直到插入的换行符为止）。如果没有在某一行上应用命令N，那么该命令与命令p的功能相同。
例子：
<code style="color:green;">#下页的脚本打印出每个包含单词word的行，及该行前面的那一行：
N
/word/p
D</code>

<strong>q</strong> <em> [address]q</em>
遇到地址address时就退出。寻址到的行首先会被发送到输出（如果默认的输出没有被禁用的话），同时还会输出由前面的命令a或命令r所添加的文本。
例子
<code style="color:green;">/Garbled text follows:/q
仅打印出文件的前50行：
50q</code>

<strong>r</strong>  <em>[address]r file</em>
读取file的内容，并把它添加到模式空间的内容后面。命令r和文件file之间必须刚好有一个空格。
例子：
<code style="color:green;">/The list of items follows:/r item_file</code>

<strong>s</strong>  <em>[address1] [,address2]s /pattern/replacement/ [flags]</em>
在每一个寻址到的行上用replacement替换pattern。如果使用了模式地址，则模式//表示指定的最后一个模式地址。可以指定以下几个标志：
 
<blockquote>n 在每一个寻址到的行上替换第n个出现的模式/pattern/。n可以是1到512范围内的任意一个数字（默认为1）。
 g 在每一个寻址到的行上替换所有出现模式/pattern/，而不仅仅替换每一个
 p 如果成功地完成了替换命令，就打印出该行。如果成功地完成了多个替换命令，就会打印出该行文本的多个副本。它经常在脚本中与命令行选项-n一起使用。
 w file 完成替换命令后，把该行文本写file中。在脚本中，一次最多可打开10个文件。</blockquote>

例子：
以下是一些简短的， 带注释的脚本：
<code style="color:green;"># 将第三个和第四个引号变成括号和右括号：
/function/{
  s/"/)/4
  s/"/(/3
}
#删除某个给定行中所有的引号：
/Title/s/"//g
#删除第一个冒号或者所有的绰号；显示出结果行：
s/://p
s/"//gp
#改变第一个“if“， 只留下”ifdef“：
/ifdef/!s/if/     if/</code>

<strong>t</strong> <em> [address1] [,address2]t[label]</em>
测试是否在寻址到的行上完成了任何替换。如果完成了，就把控制转移到被标为:label的行。如果没有指定label，那么控制将被直接转移到脚本末尾。
在Bourne shell中，命令t的用法类似于case语句。你可以测试每种情况：如果为真，就退出该结构。
例子：
假设需要填充某数据库中的几个空字段。已经存在的数据如下：
<em>ID: 1 Name: greg Rate: 45
ID: 2 Name: dale
ID: 3</em>
需要完成的数据如下：
<em>ID: 1  Name: greg  Rate: 45  Phone: ??
ID: 2  Name: dale  Rate: ??    Phone: ??
ID: 3  Name: ??      Rate: ??    Phone: ??</em>
因此需要测试已经存在的字段的数量。以下是完成该功能的脚本（字段之间是用tab键分开的）：
<code style="color:green;">/ID/{
  s/ID: .* Name: .* Rate: .*/& Phone: ??/P
  t
  s/ID: .* Name: .*/&  Rate: ??  Phone: ??/P
  t
 s/ID: .*/&  Name: .* Rate: ?? Phone: ??/P
}</code>

<strong>w</strong>  <em>[address1] [,address2]w file</em>
把模式空间中的内容添加到file中。当遇到此命令时，而不是当模式空间输出时，才发生此动作。w与file之间必须刚好有一个空格。在脚本中一次最多能打开10个文件。如果文件不存在，则该命令就创建一个文件；如果文件存在，那么每次执行该脚本时，它的内容都会被重写一次。多个直接输出到同一个文件的写命令会在文件末尾进行添加操作。
例子：
<code style="color:green;"># 将tbl和eqn块保存在一个文件中：
/^\.TS/,/^\TE/w troff_stuff
/^\.EQ/,/^\.EN/w troff_stuff</code>

<strong>x</strong>  <em>[address1] [,address2]x</em>
交换保留空间与模式空间的内容。

<strong>y</strong>  <em>[address1] [,address2]y/abc/xyz/</em>
转换字符。把字符a改成字符x，字符b改成字符y，字符c改成字符z等等
例子：
<code style="color:green;">#将item 1，2，3转换成Item A，B，C...
/^Item [1-9] /y/i123456789/IABCDEFGHI/</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>90</wp:post_id>
		<wp:post_date>2012-02-24 00:50:39</wp:post_date>
		<wp:post_date_gmt>2012-02-23 16:50:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>sed%e5%91%bd%e4%bb%a4%e6%a6%82%e8%a6%81</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1330051807]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>网页背景</title>
		<link>http://mgtuiw.blogcn.com/archives/92</link>
		<pubDate>Sat, 03 Mar 2012 02:07:13 +0000</pubDate>
		<dc:creator><![CDATA[mgtuiw]]></dc:creator>
		
		<category><![CDATA[html]]></category>

		<category domain="category" nicename="html"><![CDATA[html]]></category>

		<guid isPermaLink="false">http://mgtuiw.blogcn.com/?p=92</guid>
		<description></description>
		<content:encoded><![CDATA[  之前看过一篇关于网页设计的文章，里面大概说到了内容是反应出来的，不要被周围的东西影响到要突出的内容。其实一开始我并不很清楚理解这句话的意思。
  有人曾说过，当遇到你不懂的知识，不管什么，先记住。这句话很有道理，一开始我不懂是什么意思，慢慢的，在不断的学习和认知过程中，会慢慢消化和理解你不懂的知识，只要你曾经记住过！
  我现在终于明白yahoo.com为什么要用灰色作为背景了。<strong>如果使用别人觉得不起眼，从一开始就不会去关注的东西作背景，忽出网页的内容才是关键。那别人的目光就不会被背景吸引到而将目光指向比背景颜色更突出的颜色上面。</strong>
  这是一个细节！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>92</wp:post_id>
		<wp:post_date>2012-03-03 10:07:13</wp:post_date>
		<wp:post_date_gmt>2012-03-03 02:07:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>%e8%83%8c%e6%99%af</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1330740617]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
	</channel>
</rss>
